---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import { SITE_DESCRIPTION } from '../consts';
import { 
  uses, 
  getFeaturedUses, 
  useCategories, 
  getUsesStats,
  getHighestRatedUses,
  getRecentlyAddedUses
} from '../data/uses';

const featuredUses = getFeaturedUses();
const allUses = uses.filter(item => item.stillUsing);
const topRatedUses = getHighestRatedUses();
const recentUses = getRecentlyAddedUses();
const stats = getUsesStats();
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title="Uses - My Setup & Tools" description="Apps, hardware, and tools I use daily for development, design, and productivity. My complete tech setup and recommendations." />
		<style>
			main {
				width: 960px;
				max-width: calc(100% - 2rem);
				margin: auto;
				padding: 3rem 1rem;
			}
			
			.uses-header {
				text-align: center;
				margin-bottom: 2rem;
			}
			
			.uses-header h1 {
				margin: 0 0 0.5rem 0;
				color: rgb(var(--black));
				font-weight: 700;
				letter-spacing: -0.02em;
			}
			
			.uses-header p {
				margin: 0;
				color: rgb(var(--gray));
				font-size: 0.9rem;
			}
			
			.last-updated {
				display: inline-flex;
				align-items: center;
				gap: 0.5rem;
				margin-top: 1rem;
				padding: 0.5rem 1rem;
				background: rgb(var(--gray-light));
				border-radius: 2rem;
				font-size: 0.9rem;
				color: rgb(var(--gray-dark));
			}
			
			.stats-section {
				background: rgb(var(--gray-light));
				padding: 2rem;
				border-radius: 12px;
				margin-bottom: 3rem;
			}
			
			.stats-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
				gap: 1.5rem;
			}
			
			.stat-item {
				text-align: center;
			}
			
			.stat-number {
				font-size: 2.5rem;
				font-weight: 700;
				color: rgb(var(--accent));
				margin: 0;
			}
			
			.stat-label {
				margin: 0.5rem 0 0 0;
				color: rgb(var(--gray-dark));
				font-weight: 500;
			}
			
			.section {
				margin-bottom: 4rem;
			}
			
			.section-title {
				font-size: 2rem;
				margin: 0 0 1rem 0;
				color: rgb(var(--black));
				text-align: center;
			}
			
			.section-subtitle {
				text-align: center;
				color: rgb(var(--gray));
				margin-bottom: 2rem;
				font-size: 1rem;
			}
			
			.filter-buttons {
				display: flex;
				flex-wrap: wrap;
				justify-content: center;
				gap: 0.5rem;
				margin-bottom: 2rem;
			}
			
			.filter-btn {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				background: rgb(var(--gray-light));
				border: 1px solid rgb(var(--gray));
				color: rgb(var(--black));
				padding: 0.75rem 1.25rem;
				border-radius: 2rem;
				cursor: pointer;
				transition: all 0.2s ease;
				font-size: 0.9rem;
				font-weight: 500;
			}
			
			.filter-btn:hover {
				background: var(--accent);
				color: white;
				border-color: var(--accent);
				transform: translateY(-2px);
				box-shadow: var(--shadow-md);
			}
			
			.filter-btn:focus {
				outline: none;
				box-shadow: 0 0 0 3px oklch(from var(--accent) l c h / 0.3);
			}
			
			.filter-btn.active {
				background: var(--accent-dark);
				color: white;
				border-color: var(--accent-dark);
				transform: translateY(-2px);
				box-shadow: var(--shadow-md);
				font-weight: 600;
			}

			/* Controls Section */
			.controls-section {
				display: flex;
				flex-direction: column;
				align-items: center;
				gap: 1.5rem;
				margin-bottom: 2rem;
			}

			/* View Toggle */
			.view-toggle {
				display: flex;
				background: rgb(var(--gray-light));
				border-radius: 2rem;
				border: 1px solid rgb(var(--gray));
				overflow: hidden;
			}

			.view-btn {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				background: transparent;
				border: none;
				color: rgb(var(--black));
				padding: 0.75rem 1.5rem;
				cursor: pointer;
				transition: all 0.2s ease;
				font-size: 0.9rem;
				font-weight: 500;
				border-radius: 2rem;
				margin: 2px;
			}

			.view-btn:hover {
				background: var(--accent);
				color: white;
			}

			.view-btn.active {
				background: var(--accent-dark);
				color: white;
				font-weight: 600;
				box-shadow: var(--shadow-sm);
			}

			.view-btn svg {
				transition: all 0.2s ease;
			}

			/* Table Styles */
			.uses-table-container {
				margin-top: 2rem;
				width: 100%;
			}

			.table-wrapper {
				overflow-x: auto;
				border-radius: 1rem;
				border: 1px solid rgb(var(--gray));
				box-shadow: var(--shadow-sm);
			}

			.uses-table {
				width: 100%;
				border-collapse: collapse;
				background: white;
				font-size: 0.9rem;
			}

			.uses-table th {
				background: rgb(var(--gray-light));
				color: rgb(var(--black));
				padding: 1rem;
				text-align: left;
				border-bottom: 1px solid rgb(var(--gray));
				font-weight: 600;
				position: sticky;
				top: 0;
				z-index: 1;
			}

			.uses-table th.sortable {
				cursor: pointer;
				user-select: none;
			}

			.th-content {
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.sort-icon {
				opacity: 0.4;
				transition: all 0.2s ease;
			}

			.uses-table th.sortable:hover .sort-icon {
				opacity: 0.8;
			}

			.uses-table th.sorted .sort-icon {
				opacity: 1;
				color: var(--accent);
			}

			.uses-table td {
				padding: 1rem;
				border-bottom: 1px solid rgb(var(--gray-light));
				vertical-align: middle;
			}

			.use-row:hover {
				background: rgb(var(--gray-light));
			}

			.name-with-image {
				display: flex;
				align-items: center;
				gap: 0.75rem;
			}

			.table-item-image {
				width: 40px;
				height: 40px;
				object-fit: cover;
				border-radius: 0.5rem;
				border: 1px solid rgb(var(--gray-light));
			}

			.name-info {
				flex: 1;
				min-width: 0;
			}

			.item-name {
				font-weight: 600;
				color: rgb(var(--black));
				margin-bottom: 0.25rem;
			}

			.item-description {
				font-size: 0.8rem;
				color: rgb(var(--gray-dark));
				line-height: 1.4;
				overflow: hidden;
				display: -webkit-box;
				-webkit-line-clamp: 2;
				-webkit-box-orient: vertical;
			}

			.category-badge {
				display: inline-block;
				background: var(--accent);
				color: white;
				padding: 0.25rem 0.75rem;
				border-radius: 1rem;
				font-size: 0.8rem;
				font-weight: 500;
			}

			.rating-display {
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.stars {
				display: flex;
				gap: 0.1rem;
			}

			.star {
				color: rgb(var(--gray));
				font-size: 0.9rem;
			}

			.star.filled {
				color: #f59e0b;
			}

			.rating-number {
				font-size: 0.8rem;
				color: rgb(var(--gray-dark));
				font-weight: 500;
			}

			.price {
				font-weight: 600;
				color: var(--accent-dark);
			}

			.no-rating,
			.no-price {
				color: rgb(var(--gray));
				font-style: italic;
			}

			.table-link-btn {
				display: inline-flex;
				align-items: center;
				justify-content: center;
				width: 32px;
				height: 32px;
				background: var(--accent);
				color: white;
				border-radius: 0.5rem;
				text-decoration: none;
				transition: all 0.2s ease;
			}

			.table-link-btn:hover {
				background: var(--accent-dark);
				transform: translateY(-2px);
				box-shadow: var(--shadow-sm);
			}
			
			.uses-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
				gap: 2rem;
				margin-top: 2rem;
			}
			
			.featured-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(420px, 1fr));
				gap: 2rem;
				margin-top: 2rem;
			}
			
			.recent-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
				gap: 1.5rem;
				margin-top: 2rem;
			}
			
			.use-card {
				background: var(--color-bg-primary);
				border-radius: 16px;
				overflow: hidden;
				box-shadow: var(--shadow-md);
				transition: all 0.3s ease;
				border: 1px solid var(--color-border-secondary);
				position: relative;
			}
			
			.use-card:hover {
				transform: translateY(-6px);
				box-shadow: var(--shadow-xl);
			}
			
			.use-card.featured {
				border: 2px solid rgb(var(--accent));
				background: linear-gradient(135deg, rgba(var(--accent), 0.02), rgba(var(--accent), 0.05));
			}
			
			.use-card.recent {
				border-left: 4px solid rgb(var(--accent));
			}
			
			.use-header {
				padding: 2rem 2rem 1rem 2rem;
				position: relative;
			}
			
			.featured-badge {
				position: absolute;
				top: 1rem;
				right: 1rem;
				background: rgb(var(--accent));
				color: white;
				padding: 0.25rem 0.75rem;
				border-radius: 1rem;
				font-size: 0.8rem;
				font-weight: 600;
			}
			
			.use-title-section {
				display: flex;
				align-items: flex-start;
				gap: 1rem;
				margin-bottom: 1rem;
			}
			
			.use-icon {
				width: 60px;
				height: 60px;
				border-radius: 12px;
				background: linear-gradient(135deg, rgb(var(--accent-light, var(--accent))), rgb(var(--accent)));
				display: flex;
				align-items: center;
				justify-content: center;
				font-size: 1.5rem;
				flex-shrink: 0;
			}
			
			.use-icon.has-image {
				background: none;
				overflow: hidden;
			}
			
			.use-icon img {
				width: 100%;
				height: 100%;
				object-fit: cover;
			}
			
			.use-banner {
				width: 100%;
				height: 200px;
				margin-bottom: 1.5rem;
				border-radius: 12px;
				overflow: hidden;
				position: relative;
			}
			
			.use-banner img {
				width: 100%;
				height: 100%;
				object-fit: cover;
				transition: transform 0.3s ease;
			}
			
			.use-card:hover .use-banner img {
				transform: scale(1.05);
			}
			
			.use-title-info {
				flex: 1;
			}
			
			.use-title {
				font-size: 1.3rem;
				font-weight: 700;
				margin: 0 0 0.25rem 0;
				color: rgb(var(--black));
				line-height: 1.3;
			}
			
			.use-brand {
				font-size: 0.9rem;
				color: rgb(var(--gray));
				margin: 0;
			}
			
			.use-meta {
				display: flex;
				align-items: center;
				gap: 1rem;
				margin-bottom: 1rem;
				color: rgb(var(--gray-dark));
				font-size: 0.9rem;
			}
			
			.use-category {
				display: flex;
				align-items: center;
				gap: 0.25rem;
				background: rgb(var(--gray-light));
				padding: 0.25rem 0.75rem;
				border-radius: 1rem;
				font-size: 0.8rem;
				font-weight: 500;
			}
			
			.use-rating {
				display: flex;
				align-items: center;
				gap: 0.25rem;
			}
			
			.stars {
				color: rgb(var(--accent));
			}
			
			.use-price {
				font-weight: 600;
				color: rgb(var(--black));
			}
			
			.price-free {
				color: var(--color-green-600);
			}
			
			.use-content {
				padding: 0 2rem 2rem 2rem;
			}
			
			.use-description {
				color: rgb(var(--gray-dark));
				line-height: 1.6;
				margin-bottom: 1.5rem;
			}
			
			.use-reason {
				background: rgb(var(--gray-light));
				padding: 1rem;
				border-radius: 0.75rem;
				margin-bottom: 1.5rem;
				border-left: 3px solid rgb(var(--accent));
			}
			
			.reason-title {
				font-size: 0.9rem;
				font-weight: 600;
				color: rgb(var(--black));
				margin: 0 0 0.5rem 0;
			}
			
			.reason-text {
				font-size: 0.9rem;
				color: rgb(var(--gray-dark));
				margin: 0;
				line-height: 1.5;
			}
			
			.use-tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				margin-bottom: 1.5rem;
			}
			
			.tag {
				background: rgb(var(--gray-light));
				color: rgb(var(--gray-dark));
				padding: 0.25rem 0.75rem;
				border-radius: 1rem;
				font-size: 0.8rem;
				font-weight: 500;
			}
			
			.use-specs {
				margin-bottom: 1.5rem;
			}
			
			.specs-title {
				font-size: 0.9rem;
				font-weight: 600;
				color: rgb(var(--black));
				margin: 0 0 0.5rem 0;
			}
			
			.specs-list {
				display: grid;
				gap: 0.25rem;
			}
			
			.spec-item {
				display: grid;
				grid-template-columns: 1fr 2fr;
				gap: 0.5rem;
				font-size: 0.85rem;
				color: rgb(var(--gray-dark));
			}
			
			.spec-key {
				font-weight: 500;
				color: rgb(var(--black));
			}
			
			.use-footer {
				display: flex;
				justify-content: space-between;
				align-items: center;
				gap: 1rem;
				padding-top: 1rem;
				border-top: 1px solid rgb(var(--gray-light));
			}
			
			.use-year {
				font-size: 0.9rem;
				color: rgb(var(--gray));
			}
			
			.use-links {
				display: flex;
				gap: 0.5rem;
			}
			
			.btn {
				padding: 0.5rem 1rem;
				border-radius: 0.5rem;
				text-decoration: none;
				font-weight: 500;
				font-size: 0.9rem;
				transition: all 0.2s ease;
				text-align: center;
				display: inline-flex;
				align-items: center;
				gap: 0.5rem;
			}
			
			.btn-primary {
				background: rgb(var(--accent));
				color: white;
			}
			
			.btn-primary:hover {
				opacity: 0.9;
				transform: translateY(-1px);
			}
			
			.btn-secondary {
				background: rgb(var(--gray-light));
				color: rgb(var(--gray-dark));
				border: 1px solid rgb(var(--gray));
			}
			
			.btn-secondary:hover {
				background: rgb(var(--gray));
				color: white;
			}
			
			.alternatives {
				margin-top: 1rem;
				padding-top: 1rem;
				border-top: 1px solid rgb(var(--gray-light));
			}
			
			.alternatives-title {
				font-size: 0.9rem;
				font-weight: 600;
				color: rgb(var(--black));
				margin: 0 0 0.5rem 0;
			}
			
			.alternatives-list {
				font-size: 0.85rem;
				color: rgb(var(--gray-dark));
				margin: 0;
			}
			
			@media (max-width: 768px) {
				main {
					padding: 2rem 1rem;
				}
				
				.uses-header h1 {
					font-size: 2rem;
				}
				
				.uses-grid,
				.featured-grid {
					grid-template-columns: 1fr;
				}
				
				.filter-buttons {
					flex-direction: column;
					align-items: center;
				}
				
				.use-footer {
					flex-direction: column;
					align-items: stretch;
				}
				
				.use-links {
					justify-content: center;
				}
				
				.stats-grid {
					grid-template-columns: repeat(2, 1fr);
				}
				
				.spec-item {
					grid-template-columns: 1fr;
					gap: 0.25rem;
				}

				/* Table responsive styles */
				.controls-section {
					flex-direction: column;
					align-items: stretch;
					gap: 1rem;
				}

				.view-toggle {
					align-self: center;
				}

				.uses-table {
					font-size: 0.8rem;
				}

				.uses-table th,
				.uses-table td {
					padding: 0.75rem 0.5rem;
				}

				.name-with-image {
					flex-direction: column;
					align-items: flex-start;
					gap: 0.5rem;
				}

				.table-item-image {
					width: 32px;
					height: 32px;
				}

				.item-description {
					-webkit-line-clamp: 1;
				}

				/* Hide some columns on mobile */
				.uses-table th:nth-child(3),
				.uses-table td:nth-child(3) {
					display: none;
				}

				.category-badge {
					font-size: 0.7rem;
					padding: 0.2rem 0.5rem;
				}
			}
			
			/* Animation classes for filtering */
			.use-card.hidden {
				display: none;
			}
			
			.use-card.fade-in {
				animation: fadeIn 0.3s ease-in-out;
			}
			
			@keyframes fadeIn {
				from {
					opacity: 0;
					transform: translateY(20px);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="uses-header">
				<h1>Uses</h1>
				<p class="item-count">
					{stats.totalItems} items across {Object.keys(stats.categoryDistribution).length} categories
				</p>
			</div>

			<!-- Statistics Section -->
			<div class="stats-section">
				<div class="stats-grid">
					<div class="stat-item">
						<h3 class="stat-number">{stats.totalItems}</h3>
						<p class="stat-label">Total Items</p>
					</div>
					<div class="stat-item">
						<h3 class="stat-number">{stats.featuredItems}</h3>
						<p class="stat-label">Featured</p>
					</div>
					<div class="stat-item">
						<h3 class="stat-number">{stats.freeItems}</h3>
						<p class="stat-label">Free Tools</p>
					</div>
					<div class="stat-item">
						<h3 class="stat-number">{stats.averageRating}/5</h3>
						<p class="stat-label">Avg Rating</p>
					</div>
				</div>
			</div>

			<!-- Recently Added -->
			<!-- {recentUses.length > 0 && (
				<section class="section">
					<h2 class="section-title">🆕 Recently Added</h2>
					<p class="section-subtitle">Latest additions to my setup</p>
					<div class="recent-grid">
						{recentUses.slice(0, 3).map((item) => (
							<div class="use-card recent">
								<div class="use-header">
									<div class="use-title-section">
										<div class="use-icon">
											{item.imageUrl ? (
												<img src={item.imageUrl} alt={item.name} />
											) : (
												<span>{item.icon || '📦'}</span>
											)}
										</div>
										<div class="use-title-info">
											<h3 class="use-title">{item.name}</h3>
											{item.brand && <p class="use-brand">{item.brand}</p>}
										</div>
									</div>
									<div class="use-meta">
										<span class="use-category">
											{useCategories.find(cat => cat.key === item.category)?.icon} {item.category}
										</span>
										{item.rating && (
											<div class="use-rating">
												<span class="stars">{'★'.repeat(item.rating)}{'☆'.repeat(5 - item.rating)}</span>
												<span>{item.rating}/5</span>
											</div>
										)}
									</div>
								</div>
								<div class="use-content">
									<p class="use-description">{item.description}</p>
									{item.url && (
										<a href={item.url} target="_blank" rel="noopener noreferrer" class="btn btn-primary">
											Learn More
											<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
												<path d="M14,3V5H17.59L7.76,14.83L9.17,16.24L19,6.41V10H21V3M19,19H5V5H12V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19Z"/>
											</svg>
										</a>
									)}
								</div>
							</div>
						))}
					</div>
				</section>
			)} -->

			<!-- Featured Uses -->
			{featuredUses.length > 0 && (
				<section class="section">
					<h2 class="section-title">⭐ Featured & Most Used Items</h2>
					<p class="section-subtitle">My most essential and highly recommended tools</p>
					<div class="featured-grid">
						{featuredUses.map((item) => (
							<div class="use-card featured">
								<div class="use-header">
									<div class="featured-badge">Featured</div>
									{item.bannerUrl && (
										<div class="use-banner">
											<img src={item.bannerUrl} alt={item.name} />
										</div>
									)}
									<div class="use-title-section">
										<div class="use-icon">
											{item.imageUrl ? (
												<img src={item.imageUrl} alt={item.name} />
											) : (
												<span>{item.icon || '⭐'}</span>
											)}
										</div>
										<div class="use-title-info">
											<h3 class="use-title">{item.name}</h3>
											{item.brand && <p class="use-brand">{item.brand} {item.model && `• ${item.model}`}</p>}
										</div>
									</div>
									<div class="use-meta">
										<span class="use-category">
											{useCategories.find(cat => cat.key === item.category)?.icon} {item.subcategory || item.category}
										</span>
										{item.rating && (
											<div class="use-rating">
												<span class="stars">{'★'.repeat(item.rating)}{'☆'.repeat(5 - item.rating)}</span>
												<span>{item.rating}/5</span>
											</div>
										)}
										{item.price && (
											<span class={`use-price ${item.price.amount === 0 ? 'price-free' : ''}`}>
												{item.price.amount === 0 ? 'Free' : `$${item.price.amount.toLocaleString()}`}
											</span>
										)}
									</div>
								</div>
								<div class="use-content">
									<p class="use-description">{item.description}</p>
									
									<div class="use-reason">
										<h4 class="reason-title">Why I use it:</h4>
										<p class="reason-text">{item.reason}</p>
									</div>

									{item.tags && item.tags.length > 0 && (
										<div class="use-tags">
											{item.tags.map((tag) => (
												<span class="tag">{tag}</span>
											))}
										</div>
									)}

									{item.specs && Object.keys(item.specs).length > 0 && (
										<div class="use-specs">
											<h4 class="specs-title">Specifications:</h4>
											<div class="specs-list">
												{Object.entries(item.specs).map(([key, value]) => (
													<div class="spec-item">
														<span class="spec-key">{key}:</span>
														<span>{value}</span>
													</div>
												))}
											</div>
										</div>
									)}

									<div class="use-footer">
										{item.yearStarted && (
											<span class="use-year">Using since {item.yearStarted}</span>
										)}
										<div class="use-links">
											{item.url && (
												<a href={item.url} target="_blank" rel="noopener noreferrer" class="btn btn-primary">
													Visit Site
												</a>
											)}
											{item.affiliateUrl && (
												<a href={item.affiliateUrl} target="_blank" rel="noopener noreferrer" class="btn btn-secondary">
													Buy
												</a>
											)}
										</div>
									</div>

									{item.alternatives && item.alternatives.length > 0 && (
										<div class="alternatives">
											<h4 class="alternatives-title">Alternatives:</h4>
											<p class="alternatives-list">{item.alternatives.join(', ')}</p>
										</div>
									)}
								</div>
							</div>
						))}
					</div>
				</section>
			)}

			<!-- All Uses -->
			<section class="section">
				<h2 class="section-title">Complete Setup</h2>
				<p class="section-subtitle">Browse all items by category</p>
				
				<!-- View Toggle and Filter Controls -->
				<div class="controls-section">
					<div class="view-toggle">
						<button class="view-btn active" data-view="cards">
							<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
								<path d="M4 6h6V4H4c-1.1 0-2 .9-2 2v2zm0 5h6v-3H4v3zm0 5h6v-3H4v3zm7-10h9V4h-9v2zm0 5h9v-3h-9v3zm0 5h9v-3h-9v3z"/>
							</svg>
							Cards
						</button>
						<button class="view-btn" data-view="table">
							<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
								<path d="M20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 20H4v-3h4v3zm0-5H4v-3h4v3zm0-5H4V7h4v3zm6 10h-4v-3h4v3zm0-5h-4v-3h4v3zm0-5h-4V7h4v3zm6 10h-4v-3h4v3zm0-5h-4v-3h4v3zm0-5h-4V7h4v3z"/>
							</svg>
							Table
						</button>
					</div>

					<div class="filter-buttons">
						{useCategories.map((category) => (
							<button 
								class={`filter-btn ${category.key === 'all' ? 'active' : ''}`} 
								data-filter={category.key}
							>
								<span>{category.icon}</span>
								{category.label}
							</button>
						))}
					</div>
				</div>

				<!-- Uses Grid -->
				<div class="uses-grid" id="uses-grid">
					{allUses.map((item) => (
						<div class="use-card" data-category={item.category}>
							<div class="use-header">
								{item.bannerUrl && (
									<div class="use-banner">
										<img src={item.bannerUrl} alt={item.name} />
									</div>
								)}
								<div class="use-title-section">
									<div class="use-icon">
										{item.imageUrl ? (
											<img src={item.imageUrl} alt={item.name} />
										) : (
											<span>{item.icon || '🔧'}</span>
										)}
									</div>
									<div class="use-title-info">
										<h3 class="use-title">{item.name}</h3>
										{item.brand && <p class="use-brand">{item.brand}</p>}
									</div>
								</div>
								<div class="use-meta">
									<span class="use-category">
										{useCategories.find(cat => cat.key === item.category)?.icon} {item.subcategory || item.category}
									</span>
									{item.rating && (
										<div class="use-rating">
											<span class="stars">{'★'.repeat(item.rating)}{'☆'.repeat(5 - item.rating)}</span>
										</div>
									)}
									{item.price && (
										<span class={`use-price ${item.price.amount === 0 ? 'price-free' : ''}`}>
											{item.price.amount === 0 ? 'Free' : `$${item.price.amount.toLocaleString()}`}
										</span>
									)}
								</div>
							</div>
							<div class="use-content">
								<p class="use-description">{item.description}</p>
								
								<div class="use-reason">
									<h4 class="reason-title">Why I use it:</h4>
									<p class="reason-text">{item.reason}</p>
								</div>

								{item.tags && item.tags.length > 0 && (
									<div class="use-tags">
										{item.tags.slice(0, 4).map((tag) => (
											<span class="tag">{tag}</span>
										))}
										{item.tags.length > 4 && (
											<span class="tag">+{item.tags.length - 4}</span>
										)}
									</div>
								)}

								<div class="use-footer">
									{item.yearStarted && (
										<span class="use-year">Since {item.yearStarted}</span>
									)}
									<div class="use-links">
										{item.url && (
											<a href={item.url} target="_blank" rel="noopener noreferrer" class="btn btn-primary">
												Visit
											</a>
										)}
									</div>
								</div>
							</div>
						</div>
					))}
				</div>

				<!-- Uses Table -->
				<div class="uses-table-container" id="uses-table-container" style="display: none;">
					<div class="table-wrapper">
						<table class="uses-table">
							<thead>
								<tr>
									<th class="sortable" data-sort="name">
										<div class="th-content">
											<span>Name</span>
											<svg class="sort-icon" width="12" height="12" viewBox="0 0 24 24">
												<path d="M7 10l5 5 5-5z"/>
											</svg>
										</div>
									</th>
									<th class="sortable" data-sort="category">
										<div class="th-content">
											<span>Category</span>
											<svg class="sort-icon" width="12" height="12" viewBox="0 0 24 24">
												<path d="M7 10l5 5 5-5z"/>
											</svg>
										</div>
									</th>
									<th class="sortable" data-sort="brand">
										<div class="th-content">
											<span>Brand</span>
											<svg class="sort-icon" width="12" height="12" viewBox="0 0 24 24">
												<path d="M7 10l5 5 5-5z"/>
											</svg>
										</div>
									</th>
									<th class="sortable" data-sort="rating">
										<div class="th-content">
											<span>Rating</span>
											<svg class="sort-icon" width="12" height="12" viewBox="0 0 24 24">
												<path d="M7 10l5 5 5-5z"/>
											</svg>
										</div>
									</th>
									<th class="sortable" data-sort="price">
										<div class="th-content">
											<span>Price</span>
											<svg class="sort-icon" width="12" height="12" viewBox="0 0 24 24">
												<path d="M7 10l5 5 5-5z"/>
											</svg>
										</div>
									</th>
									<th>Actions</th>
								</tr>
							</thead>
							<tbody>
								{allUses.map((item) => (
									<tr class="use-row" data-category={item.category}>
										<td class="use-name-cell">
											<div class="name-with-image">
												{item.bannerUrl && (
													<img src={item.bannerUrl} alt={item.name} class="table-item-image" />
												)}
												<div class="name-info">
													<div class="item-name">{item.name}</div>
													{item.description && (
														<div class="item-description">{item.description}</div>
													)}
												</div>
											</div>
										</td>
										<td>
											<span class="category-badge">{item.category}</span>
										</td>
										<td class="brand-cell">
											{item.brand || '-'}
										</td>
										<td class="rating-cell">
											{item.rating ? (
												<div class="rating-display">
													<div class="stars">
														{Array.from({ length: 5 }, (_, i) => (
															<span class={`star ${i < (item.rating || 0) ? 'filled' : ''}`}>★</span>
														))}
													</div>
													<span class="rating-number">{item.rating}</span>
												</div>
											) : (
												<span class="no-rating">-</span>
											)}
										</td>
										<td class="price-cell">
											{item.price ? (
												<span class="price">{item.price}</span>
											) : (
												<span class="no-price">-</span>
											)}
										</td>
										<td class="actions-cell">
											{item.url && (
												<a href={item.url} target="_blank" rel="noopener noreferrer" class="table-link-btn">
													<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
														<path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"/>
													</svg>
												</a>
											)}
										</td>
									</tr>
								))}
							</tbody>
						</table>
					</div>
				</div>
			</section>
		</main>
		<Footer />

		<script>
			// Uses filtering and view switching functionality
			class UsesController {
				constructor() {
					this.filterButtons = document.querySelectorAll('.filter-btn');
					this.viewButtons = document.querySelectorAll('.view-btn');
					this.useCards = document.querySelectorAll('.use-card[data-category]');
					this.useRows = document.querySelectorAll('.use-row[data-category]');
					this.usesGrid = document.getElementById('uses-grid');
					this.usesTableContainer = document.getElementById('uses-table-container');
					this.currentFilter = 'all';
					this.currentView = 'cards';
					this.init();
				}

				init() {
					// Filter button functionality
					this.filterButtons.forEach(button => {
						button.addEventListener('click', (e) => {
							const filter = e.target.closest('.filter-btn').getAttribute('data-filter');
							this.currentFilter = filter;
							this.filterItems();
							this.updateActiveFilterButton(e.target.closest('.filter-btn'));
						});
					});

					// View toggle functionality
					this.viewButtons.forEach(button => {
						button.addEventListener('click', (e) => {
							const view = e.target.closest('.view-btn').getAttribute('data-view');
							this.switchView(view);
							this.updateActiveViewButton(e.target.closest('.view-btn'));
						});
					});

					// Table sorting functionality
					this.initTableSorting();
				}

				filterItems() {
					if (this.currentView === 'cards') {
						this.filterCards();
					} else {
						this.filterRows();
					}
				}

				filterCards() {
					this.useCards.forEach(card => {
						const category = card.getAttribute('data-category');
						
						if (this.currentFilter === 'all' || category === this.currentFilter) {
							card.classList.remove('hidden');
							card.classList.add('fade-in');
						} else {
							card.classList.add('hidden');
							card.classList.remove('fade-in');
						}
					});
				}

				filterRows() {
					this.useRows.forEach(row => {
						const category = row.getAttribute('data-category');
						
						if (this.currentFilter === 'all' || category === this.currentFilter) {
							row.style.display = '';
						} else {
							row.style.display = 'none';
						}
					});
				}

				switchView(view) {
					this.currentView = view;
					
					if (view === 'cards') {
						this.usesGrid.style.display = 'grid';
						this.usesTableContainer.style.display = 'none';
						this.filterCards();
					} else {
						this.usesGrid.style.display = 'none';
						this.usesTableContainer.style.display = 'block';
						this.filterRows();
					}
				}

				updateActiveFilterButton(activeButton) {
					this.filterButtons.forEach(button => {
						button.classList.remove('active');
					});
					activeButton.classList.add('active');
				}

				updateActiveViewButton(activeButton) {
					this.viewButtons.forEach(button => {
						button.classList.remove('active');
					});
					activeButton.classList.add('active');
				}

				initTableSorting() {
					const sortableHeaders = document.querySelectorAll('.uses-table th.sortable');
					
					sortableHeaders.forEach(header => {
						header.addEventListener('click', () => {
							const sortBy = header.getAttribute('data-sort');
							this.sortTable(sortBy, header);
						});
					});
				}

				sortTable(sortBy, header) {
					const tbody = document.querySelector('.uses-table tbody');
					const rows = Array.from(tbody.querySelectorAll('.use-row'));
					const isCurrentlySorted = header.classList.contains('sorted');
					const isAscending = !isCurrentlySorted || header.classList.contains('desc');

					// Clear all sorted states
					document.querySelectorAll('.uses-table th.sorted').forEach(th => {
						th.classList.remove('sorted', 'asc', 'desc');
					});

					// Sort rows
					rows.sort((a, b) => {
						let aValue, bValue;

						switch (sortBy) {
							case 'name':
								aValue = a.querySelector('.item-name').textContent.trim().toLowerCase();
								bValue = b.querySelector('.item-name').textContent.trim().toLowerCase();
								break;
							case 'category':
								aValue = a.querySelector('.category-badge').textContent.trim().toLowerCase();
								bValue = b.querySelector('.category-badge').textContent.trim().toLowerCase();
								break;
							case 'brand':
								aValue = a.querySelector('.brand-cell').textContent.trim().toLowerCase();
								bValue = b.querySelector('.brand-cell').textContent.trim().toLowerCase();
								break;
							case 'rating':
								aValue = parseFloat(a.querySelector('.rating-number')?.textContent || '0');
								bValue = parseFloat(b.querySelector('.rating-number')?.textContent || '0');
								break;
							case 'price':
								aValue = a.querySelector('.price')?.textContent || '';
								bValue = b.querySelector('.price')?.textContent || '';
								// Extract numeric value from price strings
								aValue = parseFloat(aValue.replace(/[^0-9.-]+/g, '')) || 0;
								bValue = parseFloat(bValue.replace(/[^0-9.-]+/g, '')) || 0;
								break;
							default:
								return 0;
						}

						if (typeof aValue === 'string') {
							return isAscending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
						} else {
							return isAscending ? aValue - bValue : bValue - aValue;
						}
					});

					// Update header classes
					header.classList.add('sorted', isAscending ? 'asc' : 'desc');

					// Reappend sorted rows
					rows.forEach(row => tbody.appendChild(row));
				}
			}

			// Initialize functionality when DOM is ready
			document.addEventListener('DOMContentLoaded', () => {
				new UsesController();

				// Add smooth scrolling for internal links
				document.querySelectorAll('a[href^="#"]').forEach(anchor => {
					anchor.addEventListener('click', function (e) {
						e.preventDefault();
						const target = document.querySelector(this.getAttribute('href'));
						if (target) {
							target.scrollIntoView({
								behavior: 'smooth',
								block: 'start'
							});
						}
					});
				});
			});
		</script>
	</body>
</html>
