---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import { 
  getFeaturedBooks, 
  getPublishedBooks,
  getUpcomingBooks,
  bookCategories, 
  getBookStats
} from '../data/books';

const featuredBooks = getFeaturedBooks();
const publishedBooks = getPublishedBooks();
const upcomingBooks = getUpcomingBooks();
const stats = getBookStats();
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title="Books - Published Works" description="Books I've written on software development, programming, and technology. Learn from practical guides and technical expertise." />
		<style>
			main {
				width: 960px;
				max-width: calc(100% - 2rem);
				margin: auto;
				padding: 3rem 1rem;
			}
			
			.books-header {
				text-align: center;
				margin-bottom: 3rem;
			}
			
			.books-header h1 {
				margin: 0 0 0.5rem 0;
				color: var(--text-primary);
				font-weight: var(--font-weight-bold);
				letter-spacing: var(--tracking-tight);
			}
			
			.books-header p {
				margin: 0;
				color: var(--text-secondary);
				font-size: var(--text-sm);
			}

			.intro-section {
				background: var(--background);
				padding: 2.5rem;
				border-radius: 16px;
				box-shadow: var(--shadow-md);
				margin-bottom: 3rem;
				border: 1px solid var(--border);
				max-width: 700px;
				margin-left: auto;
				margin-right: auto;
			}

			.intro-section p {
				color: var(--text-primary);
				line-height: 1.7;
				margin-bottom: 1.5rem;
				font-size: 1rem;
			}

			.intro-section h2 {
				color: var(--text-primary);
				margin: 2rem 0 1rem 0;
				font-size: 1.5rem;
				font-weight: var(--font-weight-bold);
			}

			.intro-section p:last-child {
				margin-bottom: 0;
			}
			
			.stats-section {
				background: var(--background-secondary);
				padding: 2rem;
				border-radius: 12px;
				margin-bottom: 3rem;
				border: 1px solid var(--border);
			}
			
			.stats-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
				gap: 1.5rem;
			}
			
			.stat-item {
				text-align: center;
			}
			
			.stat-number {
				font-size: 2.5rem;
				font-weight: var(--font-weight-bold);
				color: var(--accent);
				margin: 0;
			}
			
			.stat-label {
				margin: 0.5rem 0 0 0;
				color: var(--text-secondary);
				font-weight: var(--font-weight-medium);
			}
			
			.section {
				margin-bottom: 4rem;
			}
			
			.section-title {
				font-size: var(--text-3xl);
				margin: 0 0 1.5rem 0;
				color: var(--text-primary);
				text-align: center;
				font-weight: var(--font-weight-bold);
			}
			
			.section-subtitle {
				text-align: center;
				color: var(--text-secondary);
				margin-bottom: 2rem;
				font-size: var(--text-sm);
			}
			
			.filter-buttons {
				display: flex;
				flex-wrap: wrap;
				justify-content: center;
				gap: 0.5rem;
				margin-bottom: 2rem;
			}
			
			.filter-btn {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				background: var(--background-secondary);
				border: 1px solid var(--border);
				color: var(--text-primary);
				padding: 0.75rem 1.25rem;
				border-radius: 2rem;
				cursor: pointer;
				transition: all 0.2s ease;
				font-size: var(--text-sm);
				font-weight: var(--font-weight-medium);
			}
			
			.filter-btn:hover {
				background: var(--accent);
				color: white;
				border-color: var(--accent);
				transform: translateY(-2px);
				box-shadow: var(--shadow-md);
			}
			
			.filter-btn:focus {
				outline: none;
				box-shadow: 0 0 0 3px oklch(from var(--accent) l c h / 0.3);
			}
			
			.filter-btn.active {
				background: var(--accent-dark);
				color: white;
				border-color: var(--accent-dark);
				transform: translateY(-2px);
				box-shadow: var(--shadow-md);
				font-weight: var(--font-weight-bold);
			}
			
			.books-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
				gap: 2rem;
				margin-top: 2rem;
			}
			
			.featured-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(420px, 1fr));
				gap: 2rem;
				margin-top: 2rem;
			}
			
			.upcoming-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
				gap: 1.5rem;
				margin-top: 2rem;
			}
			
			.book-card {
				background: var(--background);
				border-radius: 16px;
				overflow: hidden;
				box-shadow: var(--shadow-md);
				transition: all 0.3s ease;
				border: 1px solid var(--border);
				position: relative;
				display: flex;
				flex-direction: column;
			}
			
			.book-card:hover {
				transform: translateY(-6px);
				box-shadow: var(--shadow-xl);
			}
			
			.book-card.featured {
				border: 2px solid var(--accent);
				background: linear-gradient(135deg, rgba(var(--accent-rgb), 0.02), rgba(var(--accent-rgb), 0.05));
			}
			
			.book-card.upcoming {
				border-left: 4px solid var(--accent);
			}
			
			.book-image {
				width: 100%;
				height: 200px;
				background: linear-gradient(135deg, var(--accent-light, var(--accent)), var(--accent));
				display: flex;
				align-items: center;
				justify-content: center;
				color: white;
				font-size: 3rem;
				position: relative;
			}
			
			.book-image.has-image {
				background: none;
				padding: 0;
			}
			
			.book-image img {
				width: 100%;
				height: 100%;
				object-fit: cover;
				object-position: center;
			}
			
			.featured-badge {
				position: absolute;
				top: 1rem;
				right: 1rem;
				background: var(--background);
				color: var(--accent);
				padding: 0.5rem 1rem;
				border-radius: 1.5rem;
				font-size: 0.8rem;
				font-weight: var(--font-weight-bold);
				backdrop-filter: blur(10px);
			}
			
			.status-badge {
				position: absolute;
				top: 1rem;
				left: 1rem;
				padding: 0.5rem 1rem;
				border-radius: 1.5rem;
				font-size: 0.85rem;
				font-weight: var(--font-weight-bold);
				text-transform: capitalize;
				backdrop-filter: blur(10px);
				border: 2px solid rgba(255, 255, 255, 0.3);
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
			}
			
			.status-published {
				background: #22c55e;
				color: white;
			}
			
			.status-writing {
				background: #f59e0b;
				color: white;
			}
			
			.status-reviewing {
				background: #3b82f6;
				color: white;
			}
			
			.status-planning {
				background: #6b7280;
				color: white;
			}
			
			.book-content {
				padding: 2rem;
				flex: 1;
				display: flex;
				flex-direction: column;
			}
			
			.book-header {
				margin-bottom: 1rem;
			}
			
			.book-title {
				font-size: 1.4rem;
				font-weight: var(--font-weight-bold);
				margin: 0 0 0.5rem 0;
				color: var(--text-primary);
				line-height: 1.3;
			}
			
			.book-meta {
				display: flex;
				flex-wrap: wrap;
				align-items: center;
				gap: 1rem;
				margin-bottom: 1rem;
				color: var(--text-secondary);
				font-size: var(--text-sm);
			}
			
			.meta-item {
				display: flex;
				align-items: center;
				gap: 0.25rem;
			}
			
			.book-description {
				color: var(--text-secondary);
				line-height: 1.6;
				margin-bottom: 1.5rem;
			}
			
			.book-tech {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				margin-bottom: 1.5rem;
			}
			
			.tech-tag {
				background: var(--background-secondary);
				color: var(--text-secondary);
				padding: 0.25rem 0.75rem;
				border-radius: 1rem;
				font-size: var(--text-xs);
				font-weight: var(--font-weight-medium);
			}
			
			.book-reviews {
				margin-bottom: 1.5rem;
			}
			
			.review-stars {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				margin-bottom: 0.5rem;
			}
			
			.stars {
				color: #fbbf24;
			}
			
			.review-text {
				font-size: var(--text-sm);
				color: var(--text-secondary);
				font-style: italic;
			}
			
			.book-footer {
				margin-top: auto;
				padding-top: 1rem;
				border-top: 1px solid var(--border);
			}
			
			.purchase-links {
				display: flex;
				flex-wrap: wrap;
				gap: 0.75rem;
			}
			
			.btn {
				padding: 0.75rem 1.5rem;
				border-radius: 0.75rem;
				text-decoration: none;
				font-weight: var(--font-weight-bold);
				font-size: var(--text-sm);
				transition: all 0.2s ease;
				text-align: center;
				display: inline-flex;
				align-items: center;
				gap: 0.5rem;
			}
			
			.btn-primary {
				background: var(--accent);
				color: white;
			}
			
			.btn-primary:hover {
				background: var(--accent-dark);
				transform: translateY(-1px);
				box-shadow: var(--shadow-md);
			}
			
			.btn-secondary {
				background: var(--background-secondary);
				color: var(--text-primary);
				border: 1px solid var(--border);
			}
			
			.btn-secondary:hover {
				background: var(--text-secondary);
				color: white;
			}
			
			.btn-amazon {
				background: #ff9900;
				color: white;
			}
			
			.btn-amazon:hover {
				background: #e6880a;
			}
			
			.btn-gumroad {
				background: #ff90e8;
				color: white;
			}
			
			.btn-gumroad:hover {
				background: #ff6dd7;
			}
			
			.upcoming-date {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				color: var(--accent);
				font-weight: var(--font-weight-bold);
				font-size: var(--text-sm);
				margin-bottom: 1rem;
			}
			
			@media (max-width: 768px) {
				main {
					padding: 2rem 1rem;
				}
				
				.books-header h1 {
					font-size: 2rem;
				}
				
				.books-grid,
				.featured-grid {
					grid-template-columns: 1fr;
				}
				
				.filter-buttons {
					flex-direction: column;
					align-items: center;
				}
				
				.purchase-links {
					flex-direction: column;
				}
				
				.stats-grid {
					grid-template-columns: repeat(2, 1fr);
				}
			}
			
			/* Animation classes for filtering */
			.book-card.hidden {
				display: none;
			}
			
			.book-card.fade-in {
				animation: fadeIn 0.3s ease-in-out;
			}
			
			@keyframes fadeIn {
				from {
					opacity: 0;
					transform: translateY(20px);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="books-header">
				<h1>📚 Books</h1>
				<p class="book-count">
					{stats.totalBooks} {stats.totalBooks === 1 ? 'book' : 'books'} • {stats.publishedBooks} published • {stats.upcomingBooks} in progress
				</p>
			</div>

			<div class="intro-section">
				<p>📖 Welcome to my collection of books on software development, programming, and technology. As a passionate developer and educator, I write practical guides that help fellow developers master modern technologies and best practices.</p>
				
				<h2>✍️ My Writing Philosophy</h2>
				<p>💡 I believe in learning by doing. My books focus on real-world scenarios, practical examples, and hands-on projects that you can immediately apply in your development work. Each book is crafted with care to provide both theoretical foundations and actionable insights.</p>
			</div>

			<!-- Statistics Section -->
			<div class="stats-section">
				<div class="stats-grid">
					<div class="stat-item">
						<h3 class="stat-number">{stats.totalBooks}</h3>
						<p class="stat-label">Total Books</p>
					</div>
					<div class="stat-item">
						<h3 class="stat-number">{stats.publishedBooks}</h3>
						<p class="stat-label">Published</p>
					</div>
					<div class="stat-item">
						<h3 class="stat-number">{stats.upcomingBooks}</h3>
						<p class="stat-label">In Progress</p>
					</div>
					{stats.averageRating > 0 && (
						<div class="stat-item">
							<h3 class="stat-number">{stats.averageRating.toFixed(1)}⭐</h3>
							<p class="stat-label">Avg Rating</p>
						</div>
					)}
				</div>
			</div>

			<!-- Featured Books -->
			{featuredBooks.length > 0 && (
				<section class="section">
					<h2 class="section-title">⭐ Featured Books</h2>
					<p class="section-subtitle">My most popular and recommended books</p>
					<div class="featured-grid">
						{featuredBooks.map((book) => (
							<div class="book-card featured">
								<div class={`book-image ${book.imageUrl ? 'has-image' : ''}`}>
									{book.imageUrl ? (
										<img src={book.imageUrl} alt={book.title} />
									) : (
										<span>📘</span>
									)}
									<div class="featured-badge">⭐ Featured</div>
									<div class={`status-badge status-${book.status}`}>
										{book.status}
									</div>
								</div>
								<div class="book-content">
									<div class="book-header">
										<h3 class="book-title">{book.title}</h3>
										<div class="book-meta">
											<span class="meta-item">
												<svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
													<path d="M17,7H22V17H17V19A1,1 0 0,0 18,20H20V22H17.5C16.95,22 16,21.55 16,21C16,21.55 15.05,22 14.5,22H12V20H14A1,1 0 0,0 15,19V5A1,1 0 0,0 14,4H12V2H14.5C15.05,2 16,2.45 16,3C16,2.45 16.95,2 17.5,2H20V4H18A1,1 0 0,0 17,5V7M2,7H13V9H4V15H13V17H2V7Z" />
												</svg>
												{book.publisher}
											</span>
											{book.publishedDate && (
												<span class="meta-item">
													<svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
														<path d="M9,10V12H7V10H9M13,10V12H11V10H13M17,10V12H15V10H17M19,3A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5C3.89,21 3,20.1 3,19V5A2,2 0 0,1 5,3H6V1H8V3H16V1H18V3H19M19,19V8H5V19H19M19,6V5H5V6H19Z" />
													</svg>
													{new Date(book.publishedDate).getFullYear()}
												</span>
											)}
											{book.pages && (
												<span class="meta-item">
													<svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
														<path d="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,19H5V5H19V19Z" />
													</svg>
													{book.pages} pages
												</span>
											)}
										</div>
									</div>
									<p class="book-description">
										{book.longDescription || book.description}
									</p>
									
									<div class="book-tech">
										{book.technologies.slice(0, 6).map((tech) => (
											<span class="tech-tag">{tech}</span>
										))}
										{book.technologies.length > 6 && (
											<span class="tech-tag">+{book.technologies.length - 6} more</span>
										)}
									</div>

									{book.reviews && book.reviews.length > 0 && (
										<div class="book-reviews">
											<div class="review-stars">
												<span class="stars">
													{Array.from({length: Math.round(book.reviews[0].rating)}, () => '⭐').join('')}
												</span>
												<span>({book.reviews.length} {book.reviews.length === 1 ? 'review' : 'reviews'})</span>
											</div>
											<p class="review-text">"{book.reviews[0].comment}"</p>
										</div>
									)}
									
									<div class="book-footer">
										<div class="purchase-links">
											{book.purchaseLinks.packt && (
												<a href={book.purchaseLinks.packt} target="_blank" rel="noopener noreferrer" class="btn btn-primary">
													📚 Packt Publishing
												</a>
											)}
											{book.purchaseLinks.amazon && (
												<a href={book.purchaseLinks.amazon} target="_blank" rel="noopener noreferrer" class="btn btn-amazon">
													🛒 Amazon
												</a>
											)}
											{book.purchaseLinks.gumroad && (
												<a href={book.purchaseLinks.gumroad} target="_blank" rel="noopener noreferrer" class="btn btn-gumroad">
													💝 Gumroad
												</a>
											)}
											{book.purchaseLinks.publisher && (
												<a href={book.purchaseLinks.publisher} target="_blank" rel="noopener noreferrer" class="btn btn-secondary">
													🏪 Publisher
												</a>
											)}
										</div>
									</div>
								</div>
							</div>
						))}
					</div>
				</section>
			)}

			<!-- Published Books -->
			{publishedBooks.length > 0 && (
				<section class="section">
					<h2 class="section-title">📖 Published Books</h2>
					<p class="section-subtitle">Available for purchase now</p>
					
					<!-- Filter Buttons -->
					<div class="filter-buttons">
						{bookCategories.map((category) => (
							<button 
								class={`filter-btn ${category.key === 'all' ? 'active' : ''}`} 
								data-filter={category.key}
							>
								<span>{category.icon}</span>
								{category.label}
							</button>
						))}
					</div>

					<!-- Books Grid -->
					<div class="books-grid" id="books-grid">
						{publishedBooks.filter(book => !book.featured).map((book) => (
							<div class="book-card" data-category={book.category}>
								<div class={`book-image ${book.imageUrl ? 'has-image' : ''}`}>
									{book.imageUrl ? (
										<img src={book.imageUrl} alt={book.title} />
									) : (
										<span>📗</span>
									)}
									<div class={`status-badge status-${book.status}`}>
										{book.status}
									</div>
								</div>
								<div class="book-content">
									<div class="book-header">
										<h3 class="book-title">{book.title}</h3>
										<div class="book-meta">
											<span class="meta-item">
												<svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
													<path d="M17,7H22V17H17V19A1,1 0 0,0 18,20H20V22H17.5C16.95,22 16,21.55 16,21C16,21.55 15.05,22 14.5,22H12V20H14A1,1 0 0,0 15,19V5A1,1 0 0,0 14,4H12V2H14.5C15.05,2 16,2.45 16,3C16,2.45 16.95,2 17.5,2H20V4H18A1,1 0 0,0 17,5V7M2,7H13V9H4V15H13V17H2V7Z" />
												</svg>
												{book.publisher}
											</span>
											{book.publishedDate && (
												<span class="meta-item">
													<svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
														<path d="M9,10V12H7V10H9M13,10V12H11V10H13M17,10V12H15V10H17M19,3A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5C3.89,21 3,20.1 3,19V5A2,2 0 0,1 5,3H6V1H8V3H16V1H18V3H19M19,19V8H5V19H19M19,6V5H5V6H19Z" />
													</svg>
													{new Date(book.publishedDate).getFullYear()}
												</span>
											)}
											{book.pages && (
												<span class="meta-item">
													<svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
														<path d="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,19H5V5H19V19Z" />
													</svg>
													{book.pages} pages
												</span>
											)}
										</div>
									</div>
									<p class="book-description">{book.description}</p>
									
									<div class="book-tech">
										{book.technologies.slice(0, 4).map((tech) => (
											<span class="tech-tag">{tech}</span>
										))}
										{book.technologies.length > 4 && (
											<span class="tech-tag">+{book.technologies.length - 4}</span>
										)}
									</div>

									{book.reviews && book.reviews.length > 0 && (
										<div class="book-reviews">
											<div class="review-stars">
												<span class="stars">
													{Array.from({length: Math.round(book.reviews[0].rating)}, () => '⭐').join('')}
												</span>
												<span>({book.reviews.length})</span>
											</div>
										</div>
									)}
									
									<div class="book-footer">
										<div class="purchase-links">
											{book.purchaseLinks.packt && (
												<a href={book.purchaseLinks.packt} target="_blank" rel="noopener noreferrer" class="btn btn-primary">
													📚 Packt
												</a>
											)}
											{book.purchaseLinks.amazon && (
												<a href={book.purchaseLinks.amazon} target="_blank" rel="noopener noreferrer" class="btn btn-amazon">
													🛒 Amazon
												</a>
											)}
											{book.purchaseLinks.gumroad && (
												<a href={book.purchaseLinks.gumroad} target="_blank" rel="noopener noreferrer" class="btn btn-gumroad">
													💝 Gumroad
												</a>
											)}
										</div>
									</div>
								</div>
							</div>
						))}
					</div>
				</section>
			)}

			<!-- Upcoming Books -->
			{upcomingBooks.length > 0 && (
				<section class="section">
					<h2 class="section-title">🚧 Upcoming Books</h2>
					<p class="section-subtitle">Currently in development</p>
					<div class="upcoming-grid">
						{upcomingBooks.map((book) => (
							<div class="book-card upcoming">
								<div class={`book-image ${book.imageUrl ? 'has-image' : ''}`}>
									{book.imageUrl ? (
										<img src={book.imageUrl} alt={book.title} />
									) : (
										<span>📝</span>
									)}
									<div class={`status-badge status-${book.status}`}>
										{book.status}
									</div>
								</div>
								<div class="book-content">
									<div class="book-header">
										<h3 class="book-title">{book.title}</h3>
										<div class="upcoming-date">
											<svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
												<path d="M9,10V12H7V10H9M13,10V12H11V10H13M17,10V12H15V10H17M19,3A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5C3.89,21 3,20.1 3,19V5A2,2 0 0,1 5,3H6V1H8V3H16V1H18V3H19M19,19V8H5V19H19M19,6V5H5V6H19Z" />
											</svg>
											<span>Status: {book.status}</span>
										</div>
									</div>
									<p class="book-description">{book.description}</p>
									
									<div class="book-tech">
										{book.technologies.slice(0, 3).map((tech) => (
											<span class="tech-tag">{tech}</span>
										))}
										{book.technologies.length > 3 && (
											<span class="tech-tag">+{book.technologies.length - 3}</span>
										)}
									</div>
								</div>
							</div>
						))}
					</div>
				</section>
			)}
		</main>
		<Footer />

		<script>
			// Book filtering functionality
			class BookFilter {
				constructor() {
					this.filterButtons = document.querySelectorAll('.filter-btn');
					this.bookCards = document.querySelectorAll('.book-card[data-category]');
					this.init();
				}

				init() {
					this.filterButtons.forEach(button => {
						button.addEventListener('click', (e) => {
							const filter = e.target.closest('.filter-btn').getAttribute('data-filter');
							this.filterBooks(filter);
							this.updateActiveButton(e.target.closest('.filter-btn'));
						});
					});
				}

				filterBooks(filter) {
					this.bookCards.forEach(card => {
						const category = card.getAttribute('data-category');
						
						if (filter === 'all' || category === filter) {
							card.classList.remove('hidden');
							card.classList.add('fade-in');
						} else {
							card.classList.add('hidden');
							card.classList.remove('fade-in');
						}
					});
				}

				updateActiveButton(activeButton) {
					this.filterButtons.forEach(button => {
						button.classList.remove('active');
					});
					activeButton.classList.add('active');
				}
			}

			// Initialize book filter when DOM is ready
			document.addEventListener('DOMContentLoaded', () => {
				new BookFilter();

				// Add smooth scrolling for internal links
				document.querySelectorAll('a[href^="#"]').forEach(anchor => {
					anchor.addEventListener('click', function (e) {
						e.preventDefault();
						const target = document.querySelector(this.getAttribute('href'));
						if (target) {
							target.scrollIntoView({
								behavior: 'smooth',
								block: 'start'
							});
						}
					});
				});
			});
		</script>
	</body>
</html>