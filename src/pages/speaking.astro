---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

// Types for Sessionize API response
interface SessionizeSpeaker {
  firstName: string;
  lastName: string;
  tagline: string;
  bio: string;
  speakerProfileUrl: string;
  photoUrl: string;
  photoLargeUrl: string;
}

interface SessionizeSession {
  id: number;
  title: string;
  description: string;
  sessionUrl: string;
  languageCode: string;
  language: string;
}

interface SessionizeEvent {
  id: number;
  name: string;
  eventStartDate: string; // ISO
  eventEndDate: string;   // ISO
  location: string | null;
  website: string | null;
}

interface SessionizeApiResponse {
  speaker: SessionizeSpeaker;
  sessions: SessionizeSession[];
  events: SessionizeEvent[];
}

const endpoint = 'https://sessionize.com/api/speaker/json/h69iuxpcmg';

let data: SessionizeApiResponse | null = null;
let fetchError: string | null = null;

try {
  const res = await fetch(endpoint, {
    headers: {
      'User-Agent': 'Mozilla/5.0 (compatible; SiteBuildBot/1.0; +https://example.com)'
    }
  });
  if (!res.ok) throw new Error(`HTTP ${res.status} ${res.statusText}`);
  data = await res.json();
} catch (err) {
  fetchError = err instanceof Error ? err.message : 'Unknown error';
}

// Helpers
const toDate = (s: string) => new Date(s);
const fmtDate = (s: string) => new Date(s).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: '2-digit' });

const sessionsByLanguage = data?.sessions?.reduce((acc, s) => {
  const key = s.language || 'Other';
  (acc[key] ||= []).push(s);
  return acc;
}, {} as Record<string, SessionizeSession[]>) ?? {};

const today = new Date();
const eventsSorted = (data?.events ?? []).slice().sort((a, b) => toDate(a.eventStartDate).getTime() - toDate(b.eventStartDate).getTime());
const upcomingEvents = eventsSorted.filter(e => toDate(e.eventEndDate) >= today && e.name !== "AI Dev Tools Today");
const pastEvents = eventsSorted.filter(e => toDate(e.eventEndDate) < today).reverse();

// Extract simple technology tags from titles/descriptions
const techRegex = /\b(Azure|Microsoft 365|Blazor|GitHub|Codespaces|Visual Studio|\.NET|C#|JavaScript|TypeScript|React|Angular|Vue|Docker|Kubernetes|PowerShell|SQL|NoSQL|API|GraphQL|DevOps|CI\/CD|Git|HTML|CSS|Node\.js|Python|Java|Redis|AWS|GCP|Terraform|Ansible|Semantic Kernel|AI|Machine Learning|Serverless|Functions|App Service|Authentication|OAuth|SAML|B2C|Active Directory|Teams|SharePoint|Power Platform|Power BI|Office 365|OpenAI|ChatGPT)\b/gi;
const techSet = new Set<string>();
for (const s of (data?.sessions ?? [])) {
  for (const text of [s.title, s.description]) {
    const matches = text?.match?.(techRegex) ?? [];
    for (const m of matches) techSet.add(m);
  }
}
const technologies = Array.from(techSet).sort((a, b) => a.localeCompare(b));
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Speaking - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
    <style>
      main {
        width: 960px;
        max-width: calc(100% - 2rem);
        margin: auto;
        padding: 3rem 1rem;
      }

      .speaking-header {
        text-align: center;
        margin-bottom: 3rem;
      }

      .speaking-header h1 {
        margin: 0 0 0.5rem 0;
        color: var(--text-primary);
        font-weight: var(--font-weight-bold);
        letter-spacing: var(--tracking-tight);
      }

      .intro-section {
        background: var(--background);
        padding: 2.5rem;
        border-radius: 16px;
        box-shadow: var(--shadow-md);
        margin-bottom: 3rem;
        border: 1px solid var(--border);
        max-width: 700px;
        margin-left: auto;
        margin-right: auto;
      }

      .intro-section p {
        color: var(--text-primary);
        line-height: 1.7;
        margin-bottom: 1.5rem;
        font-size: 1rem;
      }

      .intro-section h2 {
        color: var(--text-primary);
        margin: 2rem 0 1rem 0;
        font-size: 1.5rem;
        font-weight: var(--font-weight-bold);
      }

      .intro-section p:last-child {
        margin-bottom: 0;
      }

      .section {
        margin-bottom: 4rem;
      }

      .section-title {
        font-size: var(--text-3xl);
        margin: 0 0 1.5rem 0;
        color: var(--text-primary);
        text-align: center;
        font-weight: var(--font-weight-bold);
      }

      .section-sub {
        text-align: center;
        color: var(--text-secondary);
        margin-bottom: 2rem;
        font-size: var(--text-sm);
      }

      .grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 1.5rem;
      }

      .card {
        background: var(--background);
        border: 1px solid var(--border);
        border-radius: 12px;
        padding: 1.5rem;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        box-shadow: var(--shadow-sm);
      }

      .card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
      }

      .card h3 {
        margin: 0 0 0.75rem;
        font-size: 1.25rem;
        color: var(--accent);
        font-weight: var(--font-weight-bold);
      }

      .muted {
        color: var(--text-secondary);
        font-size: var(--text-sm);
      }

      .desc {
        margin: 0.75rem 0 1rem;
        line-height: 1.6;
        color: var(--text-primary);
      }

      .btn {
        display: inline-block;
        background: var(--accent);
        color: white;
        text-decoration: none;
        padding: 0.6rem 1rem;
        border-radius: var(--radius-lg);
        font-weight: var(--font-weight-bold);
        font-size: var(--text-sm);
        transition: background 0.2s ease;
      }

      .btn:hover {
        background: var(--accent-dark);
      }

      .chips {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        justify-content: center;
      }

      .chip {
        background: var(--background-secondary);
        color: var(--text-primary);
        border: 1px solid var(--border);
        padding: 0.4rem 0.8rem;
        border-radius: 999px;
        font-size: var(--text-xs);
        font-weight: var(--font-weight-bold);
      }

      .events {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 2rem;
        align-items: start;
      }

      .event {
        display: flex;
        flex-direction: column;
        height: auto;
        min-height: 200px;
        position: relative;
        overflow: hidden;
      }

      .event-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        min-height: 0;
        margin-bottom: 1rem;
      }

      .event h4 {
        margin: 0 0 1rem;
        font-size: 1.2rem;
        color: var(--accent);
        font-weight: var(--font-weight-bold);
        line-height: 1.3;
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
        flex-shrink: 0;
        word-wrap: break-word;
        overflow-wrap: break-word;
      }

      .event .meta {
        color: var(--text-secondary);
        font-size: var(--text-sm);
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        flex: 1;
        margin-bottom: 1.5rem;
      }

      .event .date-range {
        font-weight: var(--font-weight-medium);
        color: var(--text-primary);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        line-height: 1.4;
        word-wrap: break-word;
        overflow-wrap: break-word;
      }

      .event .location {
        color: var(--text-secondary);
        font-size: var(--text-sm);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        line-height: 1.4;
        word-wrap: break-word;
        overflow-wrap: break-word;
      }

      .event-actions {
        margin-top: auto;
        flex-shrink: 0;
        position: relative;
        z-index: 1;
      }

      .event a {
        color: var(--accent);
        text-decoration: none;
        font-weight: var(--font-weight-medium);
        font-size: var(--text-sm);
        padding: 0.75rem 1.25rem;
        border: 1px solid var(--accent);
        border-radius: var(--radius-lg);
        display: block;
        transition: all 0.2s ease;
        text-align: center;
        box-sizing: border-box;
      }

      .event a:hover {
        background: var(--accent);
        color: white;
        text-decoration: none;
        transform: translateY(-1px);
        box-shadow: var(--shadow-sm);
      }

      .event-status {
        font-size: var(--text-xs);
        padding: 0.4rem 0.75rem;
        border-radius: 999px;
        font-weight: var(--font-weight-bold);
        display: inline-block;
        margin-bottom: 1rem;
        flex-shrink: 0;
        width: fit-content;
      }

      .event-status.upcoming {
        background: #dcfce7;
        color: #166534;
        border: 1px solid #bbf7d0;
      }

      .event-status.past {
        background: #f3f4f6;
        color: #6b7280;
        border: 1px solid #e5e7eb;
      }

      @media (max-width: 768px) {
        .grid {
          grid-template-columns: 1fr;
        }
        .events {
          grid-template-columns: 1fr;
          gap: 1.5rem;
        }
        .event {
          min-height: 180px;
        }
      }

      @media (max-width: 480px) {
        .events {
          grid-template-columns: 1fr;
          gap: 1rem;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      {fetchError ? (
        <section>
          <div class="card">
            <h2 class="section-title">‚ùå Unable to load speaking data</h2>
            <p class="section-sub">Error: {fetchError}</p>
            <p class="muted">Please try again later.</p>
          </div>
        </section>
      ) : !data ? (
        <section>
          <div class="card">
            <h2 class="section-title">‚è≥ Loading‚Ä¶</h2>
            <p class="muted">Fetching the latest information from Sessionize.</p>
          </div>
        </section>
      ) : (
        <>
          <div class="speaking-header">
            <h1>üé§ Speaking</h1>
          </div>

          <div class="intro-section">
            <p>üó£Ô∏è I regularly speak at conferences, meetups, and online events about Azure, Microsoft 365, DevOps, End-to-End Testing, GitHub, and other technical topics. On this page you can find a list of my past and upcoming speaking engagements.</p>
            
            <h2>üí¨ Want me to speak at your event?</h2>
            <p>üìß If you'd like me to speak at your event, please reach out via the contact page. You can also check out my <a href="https://sessionize.com/emanuelebartolesi/" target="_blank">üîó speaking profile</a> and possible sessions on the sessions page.</p>
          </div>

          <section class="section">
            <h2 class="section-title">üöÄ Upcoming Events</h2>
            <p class="section-sub">Where you can catch me next</p>
            {upcomingEvents.length === 0 ? (
              <p class="muted">üìÖ No upcoming events listed right now.</p>
            ) : (
              <div class="events">
                {upcomingEvents.map(e => (
                  <div class="card event">
                    <div class="event-status upcoming">üî• Upcoming</div>
                    <div class="event-content">
                      <h4>
                        <span>üéØ</span>
                        <span>{e.name}</span>
                      </h4>
                      <div class="meta">
                        <div class="date-range">
                          <span>üìÖ</span>
                          <span>{fmtDate(e.eventStartDate)} ‚Äì {fmtDate(e.eventEndDate)}</span>
                        </div>
                        {e.location && (
                          <div class="location">
                            <span>üìç</span>
                            <span>{e.location}</span>
                          </div>
                        )}
                      </div>
                    </div>
                    <div class="event-actions">
                      {e.website && <a href={e.website} target="_blank" rel="noopener noreferrer">üåê Visit Website</a>}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </section>

          <section class="section">
            <h2 class="section-title">üìö Past Events</h2>
            <p class="section-sub">A selection of previous conferences and meetups</p>
            {pastEvents.length === 0 ? (
              <p class="muted">üìã No past events listed.</p>
            ) : (
              <div class="events">
                {pastEvents.slice(0, 12).map(e => (
                  <div class="card event">
                    <div class="event-status past">‚úÖ Completed</div>
                    <div class="event-content">
                      <h4>
                        <span>üèÜ</span>
                        <span>{e.name}</span>
                      </h4>
                      <div class="meta">
                        <div class="date-range">
                          <span>üìÖ</span>
                          <span>{fmtDate(e.eventStartDate)} ‚Äì {fmtDate(e.eventEndDate)}</span>
                        </div>
                        {e.location && (
                          <div class="location">
                            <span>üìç</span>
                            <span>{e.location}</span>
                          </div>
                        )}
                      </div>
                    </div>
                    <div class="event-actions">
                      {e.website && <a href={e.website} target="_blank" rel="noopener noreferrer">üåê Visit Website</a>}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </section>

          {technologies.length > 0 && (
            <section class="section">
              <h2 class="section-title">üõ†Ô∏è Technologies & Topics</h2>
              <p class="section-sub">Keywords extracted from session titles and descriptions</p>
              <div class="chips">
                {technologies.map(t => <span class="chip">üí° {t}</span>)}
              </div>
            </section>
          )}

          <section class="section">
            <h2 class="section-title">üíº Available Sessions</h2>
            <p class="section-sub">Talks ready for conferences, meetups, and corporate events</p>
            <div class="grid">
              {data.sessions.map((s) => (
                <article class="card">
                  <h3>üéØ {s.title}</h3>
                  <p class="muted">üåê {s.language}</p>
                  {s.description && <p class="desc">{s.description}</p>}
                  <a class="btn" href={s.sessionUrl} target="_blank" rel="noopener noreferrer">üëÅÔ∏è View details</a>
                </article>
              ))}
            </div>
          </section>

          {Object.keys(sessionsByLanguage).length > 1 && (
            <section class="section">
              <h2 class="section-title">üó£Ô∏è Sessions by Language</h2>
              <div class="grid">
                {Object.entries(sessionsByLanguage).map(([lang, list]) => (
                  <div class="card">
                    <h3>üåç {lang}</h3>
                    <p class="muted">üìä {list.length} session{list.length === 1 ? '' : 's'}</p>
                  </div>
                ))}
              </div>
            </section>
          )}
        </>
      )}
    </main>
    <Footer />
  </body>
  </html>
