---
interface GitHubUser {
  public_repos: number;
  followers: number;
  following: number;
  created_at: string;
  bio: string;
  location: string;
}

interface GitHubRepo {
  name: string;
  stargazers_count: number;
  forks_count: number;
  language: string;
  updated_at: string;
  html_url: string;
  description: string;
  fork: boolean;
}

interface LanguageStats {
  [language: string]: number;
}

interface Props {
  username: string;
}

async function fetchGitHubData(username: string) {
  const baseUrl = 'https://api.github.com';
  
  // Get GitHub token from environment variables (optional)
  const githubToken = import.meta.env.GITHUB_TOKEN;
  
  const headers: Record<string, string> = {
    'Accept': 'application/vnd.github.v3+json',
    'User-Agent': 'website-portfolio'
  };
  
  // Add authorization header if token is available
  if (githubToken) {
    headers['Authorization'] = `token ${githubToken}`;
  }
  
  try {
    // Fetch user data
    const userResponse = await fetch(`${baseUrl}/users/${username}`, { headers });
    
    if (userResponse.status === 403) {
      const rateLimitReset = userResponse.headers.get('X-RateLimit-Reset');
      const resetTime = rateLimitReset ? new Date(parseInt(rateLimitReset) * 1000) : null;
      throw new Error(`GitHub API rate limit exceeded. ${resetTime ? `Resets at ${resetTime.toLocaleTimeString()}` : 'Try again later.'}`);
    }
    
    if (!userResponse.ok) {
      throw new Error(`Failed to fetch user data: ${userResponse.status} ${userResponse.statusText}`);
    }
    const userData: GitHubUser = await userResponse.json();

    // Fetch repositories (first 100, sorted by updated)
    const reposResponse = await fetch(`${baseUrl}/users/${username}/repos?per_page=100&sort=updated&type=owner`, { headers });
    
    if (reposResponse.status === 403) {
      const rateLimitReset = reposResponse.headers.get('X-RateLimit-Reset');
      const resetTime = rateLimitReset ? new Date(parseInt(rateLimitReset) * 1000) : null;
      throw new Error(`GitHub API rate limit exceeded. ${resetTime ? `Resets at ${resetTime.toLocaleTimeString()}` : 'Try again later.'}`);
    }
    
    if (!reposResponse.ok) {
      throw new Error(`Failed to fetch repositories: ${reposResponse.status} ${reposResponse.statusText}`);
    }
    const reposData = await reposResponse.json();

    // Check if reposData is an array
    if (!Array.isArray(reposData)) {
      console.error('GitHub API returned non-array for repos:', reposData);
      throw new Error('Invalid repository data received from GitHub API');
    }

    const typedReposData: GitHubRepo[] = reposData;

    // Filter out forked repositories for some stats
    const originalRepos = typedReposData.filter(repo => !repo.fork);

    // Calculate statistics
    const totalStars = originalRepos.reduce((sum, repo) => sum + repo.stargazers_count, 0);
    const totalForks = originalRepos.reduce((sum, repo) => sum + repo.forks_count, 0);

    // Top repositories by stars
    const topRepos = originalRepos
      .filter(repo => repo.stargazers_count > 0)
      .sort((a, b) => b.stargazers_count - a.stargazers_count)
      .slice(0, 5);

    // Language statistics
    const languageStats: LanguageStats = {};
    originalRepos.forEach(repo => {
      if (repo.language) {
        languageStats[repo.language] = (languageStats[repo.language] || 0) + 1;
      }
    });

    const topLanguages = Object.entries(languageStats)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5);

    // Recent repositories (updated in last 6 months)
    const sixMonthsAgo = new Date();
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
    
    const recentRepos = originalRepos.filter(repo => 
      new Date(repo.updated_at) > sixMonthsAgo
    ).slice(0, 5);

    return {
      user: userData,
      stats: {
        totalRepos: userData.public_repos,
        originalRepos: originalRepos.length,
        totalStars,
        totalForks,
        followers: userData.followers,
        following: userData.following,
      },
      topRepos,
      topLanguages,
      recentRepos,
      error: null
    };
  } catch (error) {
    console.error('Error fetching GitHub data:', error);
    return {
      user: null,
      stats: null,
      topRepos: [],
      topLanguages: [],
      recentRepos: [],
      error: error instanceof Error ? error.message : 'Failed to fetch GitHub data'
    };
  }
}

const { username } = Astro.props;

// Fallback data when GitHub API is unavailable
const fallbackData = {
  user: null,
  stats: {
    totalRepos: 25,
    originalRepos: 20,
    totalStars: 150,
    totalForks: 45,
    followers: 120,
    following: 80,
  },
  topRepos: [
    {
      name: "example-project",
      html_url: `https://github.com/${username}/example-project`,
      description: "Unable to fetch live data due to API limits",
      stargazers_count: 0,
      forks_count: 0,
      language: "TypeScript",
      updated_at: new Date().toISOString()
    }
  ],
  topLanguages: [
    ["TypeScript", 8],
    ["JavaScript", 6],
    ["C#", 4],
    ["Python", 2]
  ],
  recentRepos: [],
  error: null
};

let data;
try {
  data = await fetchGitHubData(username);
  // If we got an error but no data, use fallback
  if (data.error && !data.stats) {
    data = {
      ...fallbackData,
      error: data.error
    };
  }
} catch (error) {
  console.error('Failed to fetch GitHub data, using fallback:', error);
  data = {
    ...fallbackData,
    error: 'GitHub API temporarily unavailable. Showing approximate data.'
  };
}

function formatDate(dateString: string) {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short'
  });
}

function getLanguageIcon(language: string) {
  const icons: { [key: string]: string } = {
    'JavaScript': '🟨',
    'TypeScript': '🔷',
    'Python': '🐍',
    'Java': '☕',
    'C#': '🔷',
    'C++': '⚡',
    'C': '🔧',
    'Go': '🐹',
    'Rust': '🦀',
    'PHP': '🐘',
    'Ruby': '💎',
    'Swift': '🍎',
    'Kotlin': '🎯',
    'Dart': '🎯',
    'HTML': '🌐',
    'CSS': '🎨',
    'Shell': '💻',
    'PowerShell': '💙',
    'Dockerfile': '🐳',
    'Vue': '💚',
    'React': '⚛️'
  };
  return icons[language] || '📄';
}
---

{data.error ? (
  <section class="github-stats-section">
    <h2 class="section-title">📊 GitHub Statistics</h2>
    <p class="section-subtitle">Overview of my development activity and contributions</p>
    
    <div class="github-stats-notice">
      <div class="notice-content">
        <div class="notice-icon">ℹ️</div>
        <div class="notice-text">
          <strong>Live data temporarily unavailable</strong>
          <p>{data.error}</p>
          {data.stats && <p>Showing approximate statistics below.</p>}
        </div>
      </div>
    </div>
    
    {data.stats && (
      <>
        <!-- Main Stats Grid -->
        <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-icon">📁</div>
          <div class="stat-content">
            <div class="stat-number">{data.stats?.totalRepos}</div>
            <div class="stat-label">Repositories</div>
          </div>
        </div>          <div class="stat-card">
            <div class="stat-icon">⭐</div>
            <div class="stat-content">
              <div class="stat-number">{data.stats?.totalStars}</div>
              <div class="stat-label">Total Stars</div>
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-icon">🍴</div>
            <div class="stat-content">
              <div class="stat-number">{data.stats?.totalForks}</div>
              <div class="stat-label">Total Forks</div>
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-icon">👥</div>
            <div class="stat-content">
              <div class="stat-number">{data.stats?.followers}</div>
              <div class="stat-label">Followers</div>
            </div>
          </div>
        </div>

        <div class="detailed-stats">
          <!-- Top Languages -->
          {data.topLanguages.length > 0 && (
            <div class="stat-section">
              <h3 class="subsection-title">🔤 Top Languages</h3>
              <div class="languages-list">
                {data.topLanguages.map(([language, count]) => (
                  <div class="language-item">
                    <span class="language-icon">{getLanguageIcon(String(language))}</span>
                    <span class="language-name">{language}</span>
                    <span class="language-count">{count} repos</span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </>
    )}
  </section>
) : (
  <section class="github-stats-section">
    <h2 class="section-title">📊 GitHub Statistics</h2>
    <p class="section-subtitle">Overview of my development activity and contributions</p>
    
    <!-- Main Stats Grid -->
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-icon">📁</div>
        <div class="stat-content">
          <div class="stat-number">{data.stats?.totalRepos}</div>
          <div class="stat-label">Repositories</div>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-icon">⭐</div>
        <div class="stat-content">
          <div class="stat-number">{data.stats?.totalStars}</div>
          <div class="stat-label">Total Stars</div>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-icon">🍴</div>
        <div class="stat-content">
          <div class="stat-number">{data.stats?.totalForks}</div>
          <div class="stat-label">Total Forks</div>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-icon">👥</div>
        <div class="stat-content">
          <div class="stat-number">{data.stats?.followers}</div>
          <div class="stat-label">Followers</div>
        </div>
      </div>
    </div>

    <div class="detailed-stats">
      <!-- Top Languages -->
      {data.topLanguages.length > 0 && (
        <div class="stat-section">
          <h3 class="subsection-title">🔤 Top Languages</h3>
          <div class="languages-list">
            {data.topLanguages.map(([language, count]) => (
              <div class="language-item">
                <span class="language-icon">{getLanguageIcon(String(language))}</span>
                <span class="language-name">{language}</span>
                <span class="language-count">{count} repos</span>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </section>
)}

<style>
  .github-stats-section {
    margin: 2rem 0;
    text-align: center;
  }

  .github-stats-notice {
    background: linear-gradient(135deg, rgba(var(--accent), 0.1), rgba(var(--accent), 0.05));
    border: 1px solid rgba(var(--accent), 0.2);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
  }

  .notice-content {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    text-align: left;
  }

  .notice-icon {
    font-size: 1.5rem;
    flex-shrink: 0;
  }

  .notice-text {
    flex: 1;
  }

  .notice-text strong {
    color: rgb(var(--black));
    font-size: 1.1rem;
    display: block;
    margin-bottom: 0.5rem;
  }

  .notice-text p {
    color: rgb(var(--gray-dark));
    margin: 0.25rem 0;
    font-size: 0.95rem;
    line-height: 1.4;
  }

  .github-stats-error {
    background: rgb(var(--gray-light));
    padding: 1rem;
    border-radius: 8px;
    color: rgb(var(--gray-dark));
    margin: 1rem 0;
  }

  .section-title {
    font-size: 2.2rem;
    font-weight: 700;
    color: rgb(var(--black));
    margin-bottom: 0.5rem;
  }

  .section-subtitle {
    color: rgb(var(--gray-dark));
    font-size: 1.1rem;
    margin-bottom: 2rem;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1.5rem;
    margin-bottom: 3rem;
  }

  .stat-card {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    border: 1px solid rgb(var(--gray));
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    display: flex;
    align-items: center;
    gap: 1rem;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .stat-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
  }

  .stat-icon {
    font-size: 2.5rem;
    opacity: 0.8;
  }

  .stat-content {
    text-align: left;
  }

  .stat-number {
    font-size: 2.5rem;
    font-weight: 700;
    color: rgb(var(--accent));
    line-height: 1;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    color: rgb(var(--gray-dark));
    font-weight: 500;
    font-size: 0.9rem;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  .detailed-stats {
    display: flex;
    justify-content: center;
    text-align: left;
    margin-top: 2rem;
  }

  .stat-section {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    border: 1px solid rgb(var(--gray));
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    max-width: 500px;
    width: 100%;
  }

  .subsection-title {
    font-size: 1.4rem;
    font-weight: 600;
    color: rgb(var(--black));
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  /* Languages */
  .languages-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .language-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: rgb(var(--gray-light));
    border-radius: 8px;
    transition: background 0.2s ease;
  }

  .language-item:hover {
    background: rgba(var(--accent), 0.1);
  }

  .language-icon {
    font-size: 1.2rem;
  }

  .language-name {
    font-weight: 500;
    color: rgb(var(--black));
    flex: 1;
  }

  .language-count {
    color: rgb(var(--gray-dark));
    font-size: 0.9rem;
  }

  @media (max-width: 768px) {
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }

    .stat-card {
      padding: 1.5rem;
      flex-direction: column;
      text-align: center;
    }

    .stat-content {
      text-align: center;
    }

    .detailed-stats {
      margin-top: 1.5rem;
    }

    .stat-section {
      padding: 1.5rem;
    }
  }

  @media (max-width: 580px) {
    .stats-grid {
      grid-template-columns: 1fr;
    }
  }
</style>