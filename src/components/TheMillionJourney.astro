---
import data from "../data/the-million-journey.json";

const totalSlots = Math.floor(data.target / data.unit); // 1,000
const categoryColors = data.categories || {} as Record<string, string>;

interface Entry {
  amount: number;
  category: string;
  date: string;
  note: string;
}

function expandUnits(entries: Entry[], unit: number) {
  const units: Array<{ category: string; date: string; note: string }> = [];
  for (const e of entries) {
    const count = Math.floor(e.amount / unit);
    for (let i = 0; i < count; i++) {
      units.push({ category: e.category, date: e.date, note: e.note });
    }
  }
  return units;
}

const filledUnits = expandUnits(data.entries ?? [], data.unit).slice(0, totalSlots);
const progress = filledUnits.length / totalSlots;

const slots = Array.from({ length: totalSlots }, (_, i) => filledUnits[i] ?? null);

// Calculate revenue breakdown by category
const revenueByCategory = data.entries.reduce((acc, entry) => {
  if (!acc[entry.category]) {
    acc[entry.category] = 0;
  }
  acc[entry.category] += entry.amount;
  return acc;
}, {} as Record<string, number>);

const totalRevenue = Object.values(revenueByCategory).reduce((sum, amount) => sum + amount, 0);

// Sort categories by revenue (highest first)
const sortedCategories = Object.entries(revenueByCategory)
  .sort(([,a], [,b]) => b - a)
  .map(([category, amount]) => ({
    category,
    amount,
    percentage: (amount / totalRevenue) * 100
  }));
---

<!-- The Million Dollar Grid (directly under page title) -->
<div class="progress-wrap">
  <div class="progress-grid">
    {slots.map((slot, i) => (
      <div 
        class={`progress-cell ${slot ? 'filled' : ''}`}
        style={slot ? `background-color: ${(categoryColors as any)[slot.category] || '#3b82f6'}` : ''}
        title={slot ? `${slot.category}: ${slot.note} (${slot.date})` : `Square ${i + 1} - $${((i + 1) * 1000).toLocaleString()}`}
      />
    ))}
  </div>
  
  <!-- Legend -->
  <div class="legend-grid">
    {Object.entries(categoryColors).map(([category, color]) => (
      <div class="legend-item">
        <span class="legend-color" style={`background-color: ${color}`}></span>
        <span class="legend-label">{category}</span>
      </div>
    ))}
    <div class="legend-item">
      <span class="legend-color legend-remaining"></span>
      <span class="legend-label">Remaining</span>
    </div>
  </div>
</div>

<div class="journey-sections">
  <!-- Progress Overview -->
  <section class="content-section">
    <h2>Journey Progress</h2>
    
    <!-- Main Progress Bar -->
    <div class="progress-section">
      <div class="progress-header">
        <span class="progress-label">Overall Progress</span>
        <span class="progress-percent">{(progress * 100).toFixed(1)}%</span>
      </div>
      <div class="progress-bar-container">
        <div 
          class="progress-bar-fill"
          style={`width: ${(progress * 100)}%`}
        ></div>
      </div>
      <div class="progress-amounts">
        <span>${(filledUnits.length * data.unit).toLocaleString()}</span>
        <span>${data.target.toLocaleString()}</span>
      </div>
    </div>
  </section>


  <!-- Revenue Breakdown by Category -->
  <section class="content-section">
    <h2>Revenue Breakdown by Category</h2>
    <div class="revenue-breakdown">
      {sortedCategories.map((item) => (
        <div class="revenue-item">
          <div class="revenue-header">
            <div class="category-info">
              <span class="category-color" style={`background-color: ${(categoryColors as any)[item.category] || '#6b7280'}`}></span>
              <span class="category-name">{item.category}</span>
            </div>
            <div class="revenue-amount">
              ${item.amount.toLocaleString()}
            </div>
          </div>
          <div class="revenue-bar-container">
            <div 
              class="revenue-bar"
              style={`width: ${item.percentage}%; background-color: ${(categoryColors as any)[item.category] || '#6b7280'}`}
            ></div>
          </div>
          <div class="revenue-percentage">
            {item.percentage.toFixed(1)}% of total revenue
          </div>
        </div>
      ))}
    </div>
    
    <!-- Total Revenue Summary -->
    <div class="revenue-summary">
      <div class="summary-item">
        <span class="summary-label">Total Revenue</span>
        <span class="summary-amount">${totalRevenue.toLocaleString()}</span>
      </div>
      <div class="summary-item">
        <span class="summary-label">Revenue Categories</span>
        <span class="summary-amount">{sortedCategories.length}</span>
      </div>
      <div class="summary-item">
        <span class="summary-label">Average per Category</span>
        <span class="summary-amount">${Math.round(totalRevenue / sortedCategories.length).toLocaleString()}</span>
      </div>
    </div>
  </section>

</div>

<style>
  .journey-sections {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .content-section {
    padding: 2rem 0;
  }
  
  .content-section h2 {
    color: rgb(var(--black));
    margin: 0 0 1.5rem 0;
    font-size: 1.8rem;
    font-weight: 600;
  }
  
  /* Grid is now directly under the page title */
  
  .progress-section {
    margin-bottom: 1.5rem;
  }
  
  .progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
  }
  
  .progress-label {
    font-size: 0.9rem;
    font-weight: 500;
    color: rgb(var(--gray-dark));
  }
  
  .progress-percent {
    font-size: 0.9rem;
    font-weight: 600;
    color: rgb(var(--accent));
  }
  
  .progress-bar-container {
    width: 100%;
    height: 12px;
    background: rgb(var(--gray-light));
    border-radius: 6px;
    overflow: hidden;
    margin-bottom: 0.5rem;
  }
  
  .progress-bar-fill {
    height: 100%;
    background: linear-gradient(90deg, rgb(var(--accent)), rgb(var(--accent-dark)));
    transition: width 0.5s ease;
  }
  
  .progress-amounts {
    display: flex;
    justify-content: space-between;
    font-size: 0.85rem;
    color: rgb(var(--gray));
  }

  .progress-wrap { 
    max-width: 100%; 
    margin: 0; 
  }
  
  .legend { 
    display: flex; 
    flex-wrap: wrap; 
    gap: .75rem; 
    margin: .75rem 0 1rem; 
  }
  
  .legend-item { 
    display: inline-flex; 
    align-items: center; 
    gap: .4rem; 
    font-size: .95rem; 
  }
  
  .swatch { 
    width: 14px; 
    height: 14px; 
    border-radius: 3px; 
    display: inline-block; 
  }
  
  .progress-grid {
    --cols: 50;
    display: grid !important;
    grid-template-columns: repeat(var(--cols), minmax(0, 1fr)) !important;
    gap: 2px;
    padding: 1rem;
    background: var(--color-bg-secondary);
    border-radius: 12px;
    max-width: 100%;
    width: 100%;
    box-shadow: inset 0 2px 8px rgba(0, 0, 0, 0.05);
    border: 1px solid var(--color-border-secondary);
  }
  
  .progress-cell {
    aspect-ratio: 1 / 1 !important;
    background: rgb(var(--gray-light));
    border-radius: 2px;
    transition: all 0.2s ease;
    min-height: 8px;
    min-width: 8px;
    cursor: pointer;
    box-shadow: var(--shadow-sm);
  }
  
  .progress-cell.filled { 
    box-shadow: var(--shadow-md);
    transform: translateY(-1px);
  }
  
  .progress-cell:hover {
    transform: scale(1.1) translateY(-1px);
    z-index: 10;
    position: relative;
    box-shadow: var(--shadow-lg);
  }
  
  .progress-cell.filled:hover {
    transform: scale(1.1) translateY(-2px);
  }
  
  .legend-grid {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
    margin-top: 2rem;
  }
  
  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(var(--gray), 0.1);
    padding: 0.5rem 1rem;
    border-radius: 1rem;
  }
  
  .legend-color {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    flex-shrink: 0;
  }
  
  .legend-remaining {
    background: rgb(var(--gray-light));
  }
  
  .legend-label {
    font-size: 0.9rem;
    font-weight: 500;
    color: rgb(var(--gray-dark));
  }
  
  .grid-stats {
    text-align: center;
    margin-top: 1.5rem;
  }
  
  .grid-stats p {
    color: rgb(var(--gray));
    font-size: 0.9rem;
    margin: 0;
  }
  
  /* Revenue Breakdown Styles */
  .revenue-breakdown {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .revenue-item {
    padding: 1.5rem 0;
    border-bottom: 1px solid var(--color-border-secondary);
  }
  
  .revenue-item:last-child {
    border-bottom: none;
  }
  
  .revenue-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }
  
  .category-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  
  .category-color {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    flex-shrink: 0;
  }
  
  .category-name {
    font-size: 1.1rem;
    font-weight: 600;
    color: rgb(var(--black));
  }
  
  .revenue-amount {
    font-size: 1.2rem;
    font-weight: 700;
    color: rgb(var(--accent));
  }
  
  .revenue-bar-container {
    width: 100%;
    height: 8px;
    background: rgb(var(--gray-light));
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.5rem;
  }
  
  .revenue-bar {
    height: 100%;
    transition: width 0.8s ease;
    border-radius: 4px;
  }
  
  .revenue-percentage {
    font-size: 0.85rem;
    color: rgb(var(--gray));
    text-align: right;
  }
  
  .revenue-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-top: 3rem;
    padding-top: 1.5rem;
  }
  
  .summary-item {
    text-align: center;
    padding: 1rem;
    background: rgba(var(--accent), 0.05);
    border-radius: 8px;
  }
  
  .summary-label {
    display: block;
    font-size: 0.9rem;
    font-weight: 500;
    color: rgb(var(--gray-dark));
    margin-bottom: 0.5rem;
  }
  
  .summary-amount {
    display: block;
    font-size: 1.5rem;
    font-weight: 700;
    color: rgb(var(--black));
  }

  /* Responsive: fewer columns on small screens */
  @media (max-width: 900px) { 
    .progress-grid { --cols: 40; } 
  }
  @media (max-width: 700px) { 
    .progress-grid { --cols: 30; } 
  }
  @media (max-width: 520px) { 
    .progress-grid { --cols: 25; } 
  }
  @media (max-width: 400px) { 
    .progress-grid { --cols: 20; } 
  }
  
    
    .grid-progress-container {
      flex-direction: column;
      gap: 2rem;
    }
    
    .grid-section {
      max-width: 100%;
    }
    
    .vertical-progress-section {
      flex: none;
      width: 100%;
    }
    
    .vertical-progress-container {
      flex-direction: row;
      min-height: 60px;
      align-items: center;
    }
    
    .vertical-progress-track {
      width: 100%;
      height: 20px;
    }
    
        .vertical-progress-fill {\n      height: 100% !important;\n      left: 0;\n      right: auto;\n    }
    
    .progress-markers {
      flex-direction: row;
      width: 100%;
      height: auto;
    }
    
    .marker {
      position: relative;
      transform: none;
    }
    
    .progress-stats {
      flex-direction: row;
      justify-content: space-around;
    }
    .revenue-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    
    .revenue-amount {
      font-size: 1.1rem;
    }
    
    .revenue-summary {
      grid-template-columns: 1fr;
    }
    
    .summary-item {
      padding: 0.75rem;
    }
    
    .summary-amount {
      font-size: 1.2rem;
    }
  }
</style>
