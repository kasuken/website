---
import {
  differenceInCalendarDays,
  eachDayOfInterval,
  formatISO,
  getDay,
  nextDay,
  parseISO,
  subWeeks,
  getYear,
  getMonth,
  isValid,
} from 'date-fns'

// Types for the component
interface WeekdayIndex extends Number {}

interface GitHubActivityDay {
  date: string
  count: number
  level: number
}

interface GitHubActivityWeek extends Array<GitHubActivityDay | undefined> {}

interface GitHubActivityMonthLabel {
  weekIndex: number
  label: string
}

interface GitHubActivityApiResponse {
  total: Record<string, number> & { lastYear: number }
  contributions: Array<GitHubActivityDay>
  error?: string
}

interface Props {
  username: string
  year?: number
}

function range(n: number) {
  return [...Array(n).keys()]
}

async function fetchData(
  username: string,
  year: number | 'last',
): Promise<GitHubActivityApiResponse> {
  function validateActivities(activities: Array<GitHubActivityDay>) {
    if (activities.length === 0) {
      throw new Error('Activity data must not be empty.')
    }
    for (const { date, count } of activities) {
      if (!isValid(parseISO(date))) {
        throw new Error(`Activity date '${date}' is not a valid ISO 8601 date string.`)
      }
      if (count < 0) {
        throw new RangeError(`Activity count must not be negative, found ${count}.`)
      }
    }
  }
  const apiUrl = 'https://github-contributions-api.jogruber.de/v4/'
  const response = await fetch(`${apiUrl}${username}?y=${String(year)}`)
  const data = (await response.json()) as GitHubActivityApiResponse
  if (!response.ok && data.error) {
    throw Error(
      `Fetching GitHub contribution data for "${username}" failed: ${data.error}`,
    )
  }

  validateActivities(data.contributions)

  return data
}

function calcColorScale([start, end]: [string, string], steps: number): Array<string> {
  return range(steps).map((i) => {
    switch (i) {
      case 0:
        return start
      case steps - 1:
        return end
      default: {
        const pos = (i / (steps - 1)) * 100
        return `color-mix(in oklab, ${end} ${parseFloat(pos.toFixed(2))}%, ${start})`
      }
    }
  })
}

function fillHoles(activities: Array<GitHubActivityDay>): Array<GitHubActivityDay> {
  const calendar = new Map<string, GitHubActivityDay>(activities.map((a) => [a.date, a]))
  const firstActivity = activities[0] as GitHubActivityDay
  const lastActivity = activities[activities.length - 1] as GitHubActivityDay

  return eachDayOfInterval({
    start: parseISO(firstActivity.date),
    end: parseISO(lastActivity.date),
  }).map((day) => {
    const date = formatISO(day, { representation: 'date' })
    if (calendar.has(date)) {
      return calendar.get(date) as GitHubActivityDay
    }
    return {
      date,
      count: 0,
      level: 0,
    }
  })
}

function groupByWeeks(
  activities: Array<GitHubActivityDay>,
  weekStart: WeekdayIndex = 0, // 0 = Sunday
): Array<GitHubActivityWeek> {
  const normalizedActivities = fillHoles(activities)
  // Determine the first date of the calendar. If the first date is not the
  // passed weekday, the respective weekday one week earlier is used.
  const firstActivity = normalizedActivities[0] as GitHubActivityDay
  const firstDate = parseISO(firstActivity.date)
  const firstCalendarDate =
    getDay(firstDate) === weekStart
      ? firstDate
      : subWeeks(nextDay(firstDate, weekStart), 1)
  // To correctly group activities by week, it is necessary to left-pad the list
  // because the first date might not be set start weekday.
  const paddedActivities = [
    ...(Array(differenceInCalendarDays(firstDate, firstCalendarDate)).fill(
      undefined,
    ) as Array<GitHubActivityDay>),
    ...normalizedActivities,
  ]
  const numberOfWeeks = Math.ceil(paddedActivities.length / 7)

  // Finally, group activities by week
  return [...Array(numberOfWeeks).keys()].map((weekIndex) =>
    paddedActivities.slice(weekIndex * 7, weekIndex * 7 + 7),
  )
}

function getMonthLabels(
  weeks: Array<GitHubActivityWeek>,
  monthNames: Array<string>,
): Array<GitHubActivityMonthLabel> {
  return weeks
    .reduce<Array<GitHubActivityMonthLabel>>((labels, week, weekIndex) => {
      const firstActivity = week.find((activity) => activity !== undefined)
      if (!firstActivity) {
        throw new Error(`Unexpected error: Week ${weekIndex + 1} is empty.`)
      }
      const month = monthNames[getMonth(parseISO(firstActivity.date))]
      if (!month) {
        const monthName = new Date(firstActivity.date).toLocaleString('en-US', {
          month: 'short',
        })
        throw new Error(`Unexpected error: undefined month label for ${monthName}.`)
      }
      const prevLabel = labels[labels.length - 1]
      if (weekIndex === 0 || !prevLabel || prevLabel.label !== month) {
        return [...labels, { weekIndex, label: month }]
      }
      return labels
    }, [])
    .filter(({ weekIndex }, index, labels) => {
      const minWeeks = 3
      // Skip the first month label if there is not enough space to the next one.
      if (index === 0) {
        return labels[1] && labels[1].weekIndex - weekIndex >= minWeeks
      }
      // Skip the last month label if there is not enough data in that month
      if (index === labels.length - 1) {
        return weeks.slice(weekIndex).length >= minWeeks
      }
      return true
    })
}

const { username, year = 'last' } = Astro.props

const data = await fetchData(username, year)

const themeFromColorscheme: [string, string] = [
  'rgb(var(--gray-light))',
  'rgb(var(--accent))',
]

const totalCount = year === 'last' ? data.total.lastYear : data.total[year]
const maxLevel = 4
const blockMargin = 4
const labelMargin = 8
const blockRadius = 2
const blockSize = 12
const fontSize = 14
const hideColorLegend = false
const hideMonthLabels = false
const hideTotalCount = false
const weekStart = 0 // 0 = Sunday, 1 = Monday, etc.

const colorScale = calcColorScale(themeFromColorscheme, maxLevel + 1)
const activities = data.contributions

const firstActivity = activities[0]
const activityYear = getYear(parseISO(firstActivity.date))
const weeks = groupByWeeks(activities, weekStart)
const labels = {
  months: [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec',
  ],
  totalCount: `{{count}} contributions in ${year === 'last' ? 'the last year' : '{{year}}'}`,
  legend: {
    less: 'Less',
    more: 'More',
  },
}
const labelHeight = hideMonthLabels ? 0 : fontSize + labelMargin
const width = weeks.length * (blockSize + blockMargin) - blockMargin
const height = labelHeight + (blockSize + blockMargin) * 7 - blockMargin
---

<section class="github-activity-section">
  <h2 class="section-title">ðŸš€ GitHub Activity</h2>
  <p class="section-subtitle">My coding journey over the past year</p>
  
  <article
    id="github-activity-calendar"
    class="activity-calendar"
  >
    <div
      class="calendar-container"
      style={{
        // Don't cover the calendar with the scrollbar.
        scrollbarGutter: 'stable',
      }}
    >
      <svg
        class="calendar-svg"
        width={width}
        height={height}
        viewBox={`0 0 ${width} ${height}`}
      >
        {
          !hideMonthLabels && (
            <g>
              {getMonthLabels(weeks, labels.months).map(({ label, weekIndex }) => (
                <text
                  x={(blockSize + blockMargin) * weekIndex}
                  y={0}
                  dominant-baseline="hanging"
                  fill="currentColor"
                >
                  {label}
                </text>
              ))}
            </g>
          )
        }
        {
          weeks.map((week, weekIndex) => (
            <g transform={`translate(${(blockSize + blockMargin) * weekIndex}, 0)`}>
              {week.map((activity, dayIndex) => {
                if (!activity) return null
                return (
                  <rect
                    class="activity-block"
                    x={0}
                    y={labelHeight + (blockSize + blockMargin) * dayIndex}
                    width={blockSize}
                    height={blockSize}
                    rx={blockRadius}
                    ry={blockRadius}
                    fill={colorScale[activity.level]}
                    data-date={activity.date}
                    data-level={activity.level}
                  />
                )
              })}
            </g>
          ))
        }
      </svg>
    </div>
    {
      !(hideTotalCount && hideColorLegend) && (
        <footer class="calendar-footer">
          {!hideTotalCount && (
            <div class="total-count">
              {labels.totalCount
                ? labels.totalCount
                    .replace('{{count}}', String(totalCount))
                    .replace('{{year}}', String(activityYear))
                : `${totalCount} activities in ${activityYear}`}
            </div>
          )}
          {!hideColorLegend && (
            <div class="color-legend">
              <span class="legend-label">{labels.legend.less}</span>
              {range(maxLevel + 1).map((level) => (
                <svg width={blockSize} height={blockSize}>
                  <rect
                    class="legend-block"
                    width={blockSize}
                    height={blockSize}
                    fill={colorScale[level]}
                    rx={blockRadius}
                    ry={blockRadius}
                  />
                </svg>
              ))}
              <span class="legend-label">{labels.legend.more}</span>
            </div>
          )}
        </footer>
      )
    }
  </article>
</section>

<style>
  .github-activity-section {
    margin: 1rem 0;
    text-align: center;
  }

  .section-title {
    font-size: 2.2rem;
    font-weight: 700;
    color: rgb(var(--black));
    margin-bottom: 0.5rem;
  }

  .section-subtitle {
    color: rgb(var(--gray-dark));
    font-size: 1.1rem;
    margin-bottom: 2rem;
  }

  .activity-calendar {
    max-width: 100%;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    font-size: 0.875rem;
    background: white;
    padding: 2rem;
    border-radius: 12px;
    border: 1px solid rgb(var(--gray));
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  }

  .calendar-container {
    max-width: 100%;
    overflow-x: auto;
    padding-top: 0.125rem;
  }

  .calendar-svg {
    display: block;
    visibility: visible;
  }

  .activity-block {
    stroke: rgb(var(--gray));
    stroke-width: 1;
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .activity-block:hover {
    stroke: rgb(var(--accent));
    stroke-width: 2;
    transform: scale(1.1);
  }

  .calendar-footer {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    justify-content: space-between;
    align-items: center;
  }

  .total-count {
    color: rgb(var(--gray-dark));
    font-weight: 500;
  }

  .color-legend {
    display: flex;
    align-items: center;
    gap: 0.1875rem;
  }

  .legend-label {
    margin: 0 0.375rem;
    color: rgb(var(--gray-dark));
    font-size: 0.8rem;
  }

  .legend-block {
    stroke: rgb(var(--gray));
    stroke-width: 1;
  }

  @media (min-width: 640px) {
    .calendar-footer {
      flex-direction: row;
    }
  }

  @media (max-width: 768px) {
    .github-activity-section {
      margin: 1rem 0;
    }

    .section-title {
      font-size: 1.8rem;
    }

    .activity-calendar {
      padding: 1.5rem;
    }
  }
</style>
