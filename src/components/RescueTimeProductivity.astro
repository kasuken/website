---
import { getCollection } from 'astro:content';

interface ProductivityDay {
  date: string
  seconds: number
  hours: number
  productivity: number
}

// Get productivity data from content collection
const productivityData = await getCollection('productivity');

// Convert to our expected format and sort by date
const sortedData: ProductivityDay[] = productivityData
  .map(entry => ({
    date: entry.data.date,
    seconds: entry.data.seconds,
    hours: entry.data.hours,
    productivity: entry.data.productivity
  }))
  .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

console.log('üìä Loaded productivity data:', sortedData);

// Calculate summary statistics
const totalHours = Math.round(sortedData.reduce((sum, day) => sum + (day.hours || 0), 0) * 10) / 10;
const avgProductivity = totalHours > 0 ? 
  Math.round((sortedData.reduce((sum, day) => sum + (day.productivity || 0) * (day.hours || 0), 0) / totalHours) * 10) / 10 : 
  0;

function getProductivityColor(productivity: number): string {
  if (productivity >= 1.5) return '#22c55e' // Green - Very productive
  if (productivity >= 0.5) return '#84cc16' // Light green - Productive
  if (productivity >= -0.5) return '#eab308' // Yellow - Neutral
  if (productivity >= -1.5) return '#f97316' // Orange - Distracting
  return '#ef4444' // Red - Very distracting
}

function getProductivityLabel(productivity: number): string {
  if (productivity >= 1.5) return 'Very Productive'
  if (productivity >= 0.5) return 'Productive'
  if (productivity >= -0.5) return 'Neutral'
  if (productivity >= -1.5) return 'Distracting'
  return 'Very Distracting'
}

function formatDayName(dateStr: string): string {
  try {
    const date = new Date(dateStr)
    if (isNaN(date.getTime())) {
      const parts = dateStr.split('-')
      if (parts.length === 3) {
        const year = parseInt(parts[0])
        const month = parseInt(parts[1]) - 1
        const day = parseInt(parts[2])
        const parsedDate = new Date(year, month, day)
        return parsedDate.toLocaleDateString('en-US', { weekday: 'short' })
      }
      return 'N/A'
    }
    return date.toLocaleDateString('en-US', { weekday: 'short' })
  } catch (error) {
    console.error('Error formatting date:', dateStr, error)
    return 'N/A'
  }
}
---

<section class="rescuetime-section">
  <h2 class="section-title">‚è±Ô∏è Productivity Insights</h2>
  <p class="section-subtitle">My productivity journey over the last 7 days (live RescueTime data)</p>
  
  <article class="productivity-container">
    <!-- Summary Stats -->
    <div class="productivity-summary">
      <div class="summary-stat">
        <span class="stat-value">{totalHours}h</span>
        <span class="stat-label">Total Hours</span>
      </div>
      <div class="summary-stat">
        <span class="stat-value" style={`color: ${getProductivityColor(avgProductivity)}`}>
          {avgProductivity > 0 ? '+' : ''}{avgProductivity}
        </span>
        <span class="stat-label">Avg Productivity</span>
      </div>
      <div class="summary-stat">
        <span class="stat-value">{getProductivityLabel(avgProductivity)}</span>
        <span class="stat-label">Overall Trend</span>
      </div>
    </div>

    <!-- Daily Productivity Chart -->
    <div class="productivity-chart" id="productivity-chart">
      {sortedData.map((day) => (
        <div class="day-column">
          <div class="day-label">{formatDayName(day.date)}</div>
          <div 
            class="productivity-bar"
            style={`
              height: ${Math.max(((day.hours || 0) / 12) * 100, 10)}%;
              background-color: ${getProductivityColor(day.productivity || 0)};
            `}
            title={`${day.hours || 0}h - ${getProductivityLabel(day.productivity || 0)} (${(day.productivity || 0) > 0 ? '+' : ''}${day.productivity || 0})`}
          >
            <span class="bar-value">{day.hours || 0}h</span>
          </div>
          <div class="productivity-score" style={`color: ${getProductivityColor(day.productivity || 0)}`}>
            {(day.productivity || 0) > 0 ? '+' : ''}{day.productivity || 0}
          </div>
        </div>
      ))}
    </div>

    <!-- Productivity Scale Legend -->
    <div class="productivity-legend">
      <span class="legend-title">Productivity Scale:</span>
      <div class="legend-items">
        <div class="legend-item">
          <span class="legend-color" style="background-color: #ef4444"></span>
          <span>Very Distracting (-2)</span>
        </div>
        <div class="legend-item">
          <span class="legend-color" style="background-color: #f97316"></span>
          <span>Distracting (-1)</span>
        </div>
        <div class="legend-item">
          <span class="legend-color" style="background-color: #eab308"></span>
          <span>Neutral (0)</span>
        </div>
        <div class="legend-item">
          <span class="legend-color" style="background-color: #84cc16"></span>
          <span>Productive (+1)</span>
        </div>
        <div class="legend-item">
          <span class="legend-color" style="background-color: #22c55e"></span>
          <span>Very Productive (+2)</span>
        </div>
      </div>
    </div>
  </article>
</section>

<style>
  .rescuetime-section {
    margin: 4rem 0;
    text-align: center;
  }

  .section-title {
    font-size: 2.2rem;
    font-weight: 700;
    color: rgb(var(--black));
    margin-bottom: 0.5rem;
  }

  .section-subtitle {
    color: rgb(var(--gray-dark));
    font-size: 1.1rem;
    margin-bottom: 2rem;
  }

  .productivity-container {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    border: 1px solid rgb(var(--gray));
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    max-width: 800px;
    margin: 0 auto;
  }

  .productivity-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid rgb(var(--gray-light));
  }

  .summary-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: rgb(var(--black));
  }

  .stat-label {
    font-size: 0.875rem;
    color: rgb(var(--gray-dark));
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .productivity-chart {
    display: flex;
    justify-content: space-between;
    align-items: end;
    height: 200px;
    margin-bottom: 1.5rem;
    padding: 0 1rem;
    gap: 0.5rem;
  }

  .day-column {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100%;
  }

  .day-label {
    font-size: 0.875rem;
    font-weight: 600;
    color: rgb(var(--gray-dark));
    margin-bottom: 0.5rem;
  }

  .productivity-bar {
    flex: 1;
    width: 100%;
    max-width: 40px;
    border-radius: 4px 4px 0 0;
    display: flex;
    align-items: end;
    justify-content: center;
    padding: 0.25rem;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    min-height: 20px;
  }

  .productivity-bar:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .bar-value {
    font-size: 0.75rem;
    font-weight: 600;
    color: white;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
  }

  .productivity-score {
    font-size: 0.875rem;
    font-weight: 600;
    margin-top: 0.5rem;
  }

  .productivity-legend {
    padding-top: 1.5rem;
    border-top: 1px solid rgb(var(--gray-light));
  }

  .legend-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: rgb(var(--gray-dark));
    margin-bottom: 1rem;
    display: block;
  }

  .legend-items {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.75rem;
    color: rgb(var(--gray-dark));
  }

  .legend-color {
    width: 12px;
    height: 12px;
    border-radius: 2px;
    border: 1px solid rgba(0, 0, 0, 0.1);
  }

  @media (max-width: 768px) {
    .rescuetime-section {
      margin: 2rem 0;
    }

    .section-title {
      font-size: 1.8rem;
    }

    .productivity-container {
      padding: 1.5rem;
    }

    .productivity-summary {
      grid-template-columns: repeat(3, 1fr);
      gap: 1rem;
    }

    .productivity-chart {
      height: 150px;
      padding: 0 0.5rem;
    }

    .legend-items {
      gap: 0.5rem;
    }

    .legend-item {
      font-size: 0.7rem;
    }
  }

  @media (max-width: 480px) {
    .productivity-summary {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .legend-items {
      flex-direction: column;
      align-items: center;
    }
  }
</style>